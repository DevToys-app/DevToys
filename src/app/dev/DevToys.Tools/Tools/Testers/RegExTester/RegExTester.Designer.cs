//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DevToys.Tools.Tools.Testers.RegExTester {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class RegExTester {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal RegExTester() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("DevToys.Tools.Tools.Testers.RegExTester.RegExTester", typeof(RegExTester).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Regular Expression Tester tool.
        /// </summary>
        internal static string AccessibleName {
            get {
                return ResourceManager.GetString("AccessibleName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All matches.
        /// </summary>
        internal static string AllMatches {
            get {
                return ResourceManager.GetString("AllMatches", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Find all the matches in the text or stop after the first match..
        /// </summary>
        internal static string AllMatchesDescription {
            get {
                return ResourceManager.GetString("AllMatchesDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Alternation.
        /// </summary>
        internal static string CheatSheetAlternation {
            get {
                return ResourceManager.GetString("CheatSheetAlternation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Acts like a boolean OR. Matches the expression before or after the |.
        ///It can operate within a group, or on a whole expression. The patterns will be tested in order..
        /// </summary>
        internal static string CheatSheetAlternationDetails {
            get {
                return ResourceManager.GetString("CheatSheetAlternationDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Any character except newline.
        /// </summary>
        internal static string CheatSheetAnyCharacter {
            get {
                return ResourceManager.GetString("CheatSheetAnyCharacter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Matches any character other than newline. Equivalent to [^\n\r]..
        /// </summary>
        internal static string CheatSheetAnyCharacterDetails {
            get {
                return ResourceManager.GetString("CheatSheetAnyCharacterDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Atomic group.
        /// </summary>
        internal static string CheatSheetAtomicGroup {
            get {
                return ResourceManager.GetString("CheatSheetAtomicGroup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Non-capturing group that discards backtracking positions once matched.
        ///For example, /(?&gt;ab|a)b/ will match abb but not ab because once the ab option has matched, the atomic group prevents backtracking to retry with the a option..
        /// </summary>
        internal static string CheatSheetAtomicGroupDetails {
            get {
                return ResourceManager.GetString("CheatSheetAtomicGroupDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Beginning.
        /// </summary>
        internal static string CheatSheetBeginning {
            get {
                return ResourceManager.GetString("CheatSheetBeginning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Matches the beginning of the string, or the beginning of a line if the multiline flag (m) is enabled. This matches a position, not a character..
        /// </summary>
        internal static string CheatSheetBeginningDetails {
            get {
                return ResourceManager.GetString("CheatSheetBeginningDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Beginning of string.
        /// </summary>
        internal static string CheatSheetBeginningOfString {
            get {
                return ResourceManager.GetString("CheatSheetBeginningOfString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Matches the beginning of the string. Unlike ^, this is unaffected by the multiline flag (m). This matches a position, not a character..
        /// </summary>
        internal static string CheatSheetBeginningOfStringDetails {
            get {
                return ResourceManager.GetString("CheatSheetBeginningOfStringDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bell.
        /// </summary>
        internal static string CheatSheetBell {
            get {
                return ResourceManager.GetString("CheatSheetBell", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Matches a BELL character (char code 7)..
        /// </summary>
        internal static string CheatSheetBellDetails {
            get {
                return ResourceManager.GetString("CheatSheetBellDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Branch reset group.
        /// </summary>
        internal static string CheatSheetBranchResetGroup {
            get {
                return ResourceManager.GetString("CheatSheetBranchResetGroup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Define alternative groups that share the same group numbers.
        ///For example, in (?|(a)|(b)) both groups (a and b) would be counted as group #1..
        /// </summary>
        internal static string CheatSheetBranchResetGroupDetails {
            get {
                return ResourceManager.GetString("CheatSheetBranchResetGroupDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Capture group.
        /// </summary>
        internal static string CheatSheetCaptureGroup {
            get {
                return ResourceManager.GetString("CheatSheetCaptureGroup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inserts the results of the specified capture group. For example, $3 would insert the third capture group.
        ///There are multiple syntaxes for this feature:
        ///
        ///$1 \1 \{1}.
        /// </summary>
        internal static string CheatSheetCaptureGroupDetails {
            get {
                return ResourceManager.GetString("CheatSheetCaptureGroupDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Capturing group.
        /// </summary>
        internal static string CheatSheetCapturingGroup {
            get {
                return ResourceManager.GetString("CheatSheetCapturingGroup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Groups multiple tokens together and creates a capture group for extracting a substring or using a backreference..
        /// </summary>
        internal static string CheatSheetCapturingGroupDetails {
            get {
                return ResourceManager.GetString("CheatSheetCapturingGroupDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Carriage return.
        /// </summary>
        internal static string CheatSheetCarriageReturn {
            get {
                return ResourceManager.GetString("CheatSheetCarriageReturn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Matches a CARRIAGE RETURN character (char code 13)..
        /// </summary>
        internal static string CheatSheetCarriageReturnDetails {
            get {
                return ResourceManager.GetString("CheatSheetCarriageReturnDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Anchors.
        /// </summary>
        internal static string CheatSheetCategoryAnchors {
            get {
                return ResourceManager.GetString("CheatSheetCategoryAnchors", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Character classes.
        /// </summary>
        internal static string CheatSheetCategoryCharacterClasses {
            get {
                return ResourceManager.GetString("CheatSheetCategoryCharacterClasses", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Escaped characters.
        /// </summary>
        internal static string CheatSheetCategoryEscapedCharacters {
            get {
                return ResourceManager.GetString("CheatSheetCategoryEscapedCharacters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Groups and References.
        /// </summary>
        internal static string CheatSheetCategoryGroupsReferences {
            get {
                return ResourceManager.GetString("CheatSheetCategoryGroupsReferences", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Lookaround.
        /// </summary>
        internal static string CheatSheetCategoryLookaround {
            get {
                return ResourceManager.GetString("CheatSheetCategoryLookaround", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Quantifiers and Alternation.
        /// </summary>
        internal static string CheatSheetCategoryQuantifiersAlternation {
            get {
                return ResourceManager.GetString("CheatSheetCategoryQuantifiersAlternation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Special.
        /// </summary>
        internal static string CheatSheetCategorySpecial {
            get {
                return ResourceManager.GetString("CheatSheetCategorySpecial", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Substitution.
        /// </summary>
        internal static string CheatSheetCategorySubstitution {
            get {
                return ResourceManager.GetString("CheatSheetCategorySubstitution", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Character range.
        /// </summary>
        internal static string CheatSheetCharacterRange {
            get {
                return ResourceManager.GetString("CheatSheetCharacterRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Matches a character having a character code between the two specified characters inclusive..
        /// </summary>
        internal static string CheatSheetCharacterRangeDetails {
            get {
                return ResourceManager.GetString("CheatSheetCharacterRangeDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A single character of A, b or c.
        /// </summary>
        internal static string CheatSheetCharacterSet {
            get {
                return ResourceManager.GetString("CheatSheetCharacterSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Matches either an A, b or c character.
        /// </summary>
        internal static string CheatSheetCharacterSetDetails {
            get {
                return ResourceManager.GetString("CheatSheetCharacterSetDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Comment.
        /// </summary>
        internal static string CheatSheetComment {
            get {
                return ResourceManager.GetString("CheatSheetComment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Allows you to insert a comment into your expression that is ignored when finding a match..
        /// </summary>
        internal static string CheatSheetCommentDetails {
            get {
                return ResourceManager.GetString("CheatSheetCommentDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Conditional.
        /// </summary>
        internal static string CheatSheetConditional {
            get {
                return ResourceManager.GetString("CheatSheetConditional", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Conditionally matches one of two options based on whether a lookaround is matched.
        ///For example, /(?(?=a)ab|..)/ will match ab and zx but not ax, because if the first character matches the condition a then it evaluates the pattern ab.
        ///
        ///Any lookaround can be used as the condition. A lookahead will start the subsequent match at the start of the condition, a lookbehind will start it after..
        /// </summary>
        internal static string CheatSheetConditionalDetails {
            get {
                return ResourceManager.GetString("CheatSheetConditionalDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Control character escape.
        /// </summary>
        internal static string CheatSheetControlCharacterEscape {
            get {
                return ResourceManager.GetString("CheatSheetControlCharacterEscape", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Escaped control character in the form \cZ. This can range from \cA (SOH, char code 1) to \cZ (SUB, char code 26)..
        /// </summary>
        internal static string CheatSheetControlCharacterEscapeDetails {
            get {
                return ResourceManager.GetString("CheatSheetControlCharacterEscapeDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Define.
        /// </summary>
        internal static string CheatSheetDefine {
            get {
                return ResourceManager.GetString("CheatSheetDefine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Used to define named groups for use as subroutines without including them in the match.
        ///For example, /A(?(DEFINE)(?&apos;foo&apos;Z))B\g&apos;foo&apos;/ will match ABZ, because the define group is ignored in the match except to define the foo subroutine that is referenced later with \g&apos;foo&apos;..
        /// </summary>
        internal static string CheatSheetDefineDetails {
            get {
                return ResourceManager.GetString("CheatSheetDefineDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Description.
        /// </summary>
        internal static string CheatSheetDescription {
            get {
                return ResourceManager.GetString("CheatSheetDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Digit.
        /// </summary>
        internal static string CheatSheetDigit {
            get {
                return ResourceManager.GetString("CheatSheetDigit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Matches any digit character (0-9). Equivalent to [0-9]..
        /// </summary>
        internal static string CheatSheetDigitDetails {
            get {
                return ResourceManager.GetString("CheatSheetDigitDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to End.
        /// </summary>
        internal static string CheatSheetEnd {
            get {
                return ResourceManager.GetString("CheatSheetEnd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Matches the end of the string, or the end of a line if the multiline flag (m) is enabled. This matches a position, not a character..
        /// </summary>
        internal static string CheatSheetEndDetails {
            get {
                return ResourceManager.GetString("CheatSheetEndDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to End of string.
        /// </summary>
        internal static string CheatSheetEndOfString {
            get {
                return ResourceManager.GetString("CheatSheetEndOfString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Matches the end of the string. Unlike $, this is unaffected by the multiline flag (m). This matches a position, not a character..
        /// </summary>
        internal static string CheatSheetEndOfStringDetails {
            get {
                return ResourceManager.GetString("CheatSheetEndOfStringDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Esc.
        /// </summary>
        internal static string CheatSheetEsc {
            get {
                return ResourceManager.GetString("CheatSheetEsc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Escaped characters.
        /// </summary>
        internal static string CheatSheetEscapedCharacters {
            get {
                return ResourceManager.GetString("CheatSheetEscapedCharacters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For convenience, these escaped characters are supported in the Replace string in RegExr: \n, \r, \t, \\, and unicode escapes \uFFFF. This may vary in your deploy environment..
        /// </summary>
        internal static string CheatSheetEscapedCharactersDetails {
            get {
                return ResourceManager.GetString("CheatSheetEscapedCharactersDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Escape sequence.
        /// </summary>
        internal static string CheatSheetEscapeSequence {
            get {
                return ResourceManager.GetString("CheatSheetEscapeSequence", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All characters between the \Q and the \E are interpreted as a literal string. If \E is omitted, it continues to the end of the expression. For example, the expression /\Q(?.)\E/ will match the string (?.)..
        /// </summary>
        internal static string CheatSheetEscapeSequenceDetails {
            get {
                return ResourceManager.GetString("CheatSheetEscapeSequenceDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Matches a ESC character (char code 27)..
        /// </summary>
        internal static string CheatSheetEscDetails {
            get {
                return ResourceManager.GetString("CheatSheetEscDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Form feed.
        /// </summary>
        internal static string CheatSheetFormFeed {
            get {
                return ResourceManager.GetString("CheatSheetFormFeed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Matches a FORM FEED character (char code 12)..
        /// </summary>
        internal static string CheatSheetFormFeedDetails {
            get {
                return ResourceManager.GetString("CheatSheetFormFeedDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Group conditional.
        /// </summary>
        internal static string CheatSheetGroupConditional {
            get {
                return ResourceManager.GetString("CheatSheetGroupConditional", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Conditionally matches one of two options based on whether group &apos;undefined&apos; matched.
        ///For example, /(z)?(?(1)a|b)/ will match za because the first capture group matches z successfully, which causes the conditional to match the first option a.
        ///
        ///The same pattern will also match b on its own, because group 1 doesn&apos;t match, so it instead tries to match the second option b.
        ///
        ///You can reference a group by name, number, or relative position (ex. -1)..
        /// </summary>
        internal static string CheatSheetGroupConditionalDetails {
            get {
                return ResourceManager.GetString("CheatSheetGroupConditionalDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hexadecimal escape.
        /// </summary>
        internal static string CheatSheetHexadecimalEscape {
            get {
                return ResourceManager.GetString("CheatSheetHexadecimalEscape", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hexadecimal escaped character in the form \xFF..
        /// </summary>
        internal static string CheatSheetHexadecimalEscapeDetails {
            get {
                return ResourceManager.GetString("CheatSheetHexadecimalEscapeDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Horizontal whitespace.
        /// </summary>
        internal static string CheatSheetHorizontalWhitespace {
            get {
                return ResourceManager.GetString("CheatSheetHorizontalWhitespace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Matches any horizontal whitespace character (spaces, tabs)..
        /// </summary>
        internal static string CheatSheetHorizontalWhitespaceDetails {
            get {
                return ResourceManager.GetString("CheatSheetHorizontalWhitespaceDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Keep out.
        /// </summary>
        internal static string CheatSheetKeepOut {
            get {
                return ResourceManager.GetString("CheatSheetKeepOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Keep text matched so far out of the returned match, essentially discarding the match up to this point.For example /o\Kbar/ will match bar within the string foobar.
        /// </summary>
        internal static string CheatSheetKeepOutDetails {
            get {
                return ResourceManager.GetString("CheatSheetKeepOutDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Lazy.
        /// </summary>
        internal static string CheatSheetLazy {
            get {
                return ResourceManager.GetString("CheatSheetLazy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Makes the preceding quantifier lazy, causing it to match as few characters as possible. By default, quantifiers are greedy, and will match as many characters as possible.
        ///This behaviour is reversed by the ungreedy (U) flag/modifier..
        /// </summary>
        internal static string CheatSheetLazyDetails {
            get {
                return ResourceManager.GetString("CheatSheetLazyDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Line break.
        /// </summary>
        internal static string CheatSheetLineBreak {
            get {
                return ResourceManager.GetString("CheatSheetLineBreak", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Matches any line break character, including the CRLF pair, and CR / LF individually..
        /// </summary>
        internal static string CheatSheetLineBreakDetails {
            get {
                return ResourceManager.GetString("CheatSheetLineBreakDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Line feed.
        /// </summary>
        internal static string CheatSheetLineFeed {
            get {
                return ResourceManager.GetString("CheatSheetLineFeed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Matches a LINE FEED character (char code 10)..
        /// </summary>
        internal static string CheatSheetLineFeedDetails {
            get {
                return ResourceManager.GetString("CheatSheetLineFeedDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Match.
        /// </summary>
        internal static string CheatSheetMatch {
            get {
                return ResourceManager.GetString("CheatSheetMatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Match any.
        /// </summary>
        internal static string CheatSheetMatchAny {
            get {
                return ResourceManager.GetString("CheatSheetMatchAny", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A character set that can be used to match any character, including line breaks, without the dotall flag (s)..
        /// </summary>
        internal static string CheatSheetMatchAnyDetails {
            get {
                return ResourceManager.GetString("CheatSheetMatchAnyDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inserts the matched text.
        ///There are multiple syntaxes for this feature:
        ///
        ///$0 \0 \{0}.
        /// </summary>
        internal static string CheatSheetMatchDetails {
            get {
                return ResourceManager.GetString("CheatSheetMatchDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mode modifier.
        /// </summary>
        internal static string CheatSheetModeModifier {
            get {
                return ResourceManager.GetString("CheatSheetModeModifier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enables or disables modes for the remainder of the expression.Matching modes generally map to expression flags. For example (?i) would enable case insensitivity for the remainder of the expression.
        ///Multiple modifiers can be specified, and any modifiers that follow - are disabled. For example (?im-s) would enable case insensitivity &amp; multiline modes, and disable dotall.
        ///
        ///Supported modifiers are: i - case insensitive, s - dotall, m - multiline, x - free spacing, J - allow duplicate names, U - ungreedy..
        /// </summary>
        internal static string CheatSheetModeModifierDetails {
            get {
                return ResourceManager.GetString("CheatSheetModeModifierDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Named capturing group.
        /// </summary>
        internal static string CheatSheetNamedCapturingGroup {
            get {
                return ResourceManager.GetString("CheatSheetNamedCapturingGroup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Creates a capturing group that can be referenced via the specified name.
        ///There are multiple syntaxes for this feature:
        ///
        ///(?&apos;name&apos;ABC) (?P&lt;name&gt;ABC) (?&lt;name&gt;ABC).
        /// </summary>
        internal static string CheatSheetNamedCapturingGroupDetails {
            get {
                return ResourceManager.GetString("CheatSheetNamedCapturingGroupDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Named reference.
        /// </summary>
        internal static string CheatSheetNamedReference {
            get {
                return ResourceManager.GetString("CheatSheetNamedReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Matches the results of a named capture group.
        ///There are multiple syntaxes for this feature:
        ///
        ///\k&apos;name&apos; \k&lt;name&gt; \k{name} \g{name} (?P=name).
        /// </summary>
        internal static string CheatSheetNamedReferenceDetails {
            get {
                return ResourceManager.GetString("CheatSheetNamedReferenceDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Named subroutine.
        /// </summary>
        internal static string CheatSheetNamedSubroutine {
            get {
                return ResourceManager.GetString("CheatSheetNamedSubroutine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Matches the expression in a capture group. Compare this to a reference, that matches the result.
        ///There are multiple syntaxes for this feature: \g&lt;name&gt; \g&apos;name&apos; (?&amp;name) (?P&gt;name)..
        /// </summary>
        internal static string CheatSheetNamedSubroutineDetails {
            get {
                return ResourceManager.GetString("CheatSheetNamedSubroutineDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A character except A, b or c.
        /// </summary>
        internal static string CheatSheetNegatedCharacterSet {
            get {
                return ResourceManager.GetString("CheatSheetNegatedCharacterSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Match any character that is not A, b or c..
        /// </summary>
        internal static string CheatSheetNegatedCharacterSetDetails {
            get {
                return ResourceManager.GetString("CheatSheetNegatedCharacterSetDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Negative lookahead.
        /// </summary>
        internal static string CheatSheetNegativeLookahead {
            get {
                return ResourceManager.GetString("CheatSheetNegativeLookahead", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies a group that can not match after the main expression (if it matches, the result is discarded)..
        /// </summary>
        internal static string CheatSheetNegativeLookaheadDetails {
            get {
                return ResourceManager.GetString("CheatSheetNegativeLookaheadDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Negative lookbehind.
        /// </summary>
        internal static string CheatSheetNegativeLookbehind {
            get {
                return ResourceManager.GetString("CheatSheetNegativeLookbehind", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies a group that can not match before the main expression (if it matches, the result is discarded)..
        /// </summary>
        internal static string CheatSheetNegativeLookbehindDetails {
            get {
                return ResourceManager.GetString("CheatSheetNegativeLookbehindDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Non-capturing group.
        /// </summary>
        internal static string CheatSheetNonCapturingGroup {
            get {
                return ResourceManager.GetString("CheatSheetNonCapturingGroup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Groups multiple tokens together without creating a capture group..
        /// </summary>
        internal static string CheatSheetNonCapturingGroupDetails {
            get {
                return ResourceManager.GetString("CheatSheetNonCapturingGroupDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not digit.
        /// </summary>
        internal static string CheatSheetNotDigit {
            get {
                return ResourceManager.GetString("CheatSheetNotDigit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Matches any character that is not a digit character (0-9). Equivalent to [^0-9]..
        /// </summary>
        internal static string CheatSheetNotDigitDetails {
            get {
                return ResourceManager.GetString("CheatSheetNotDigitDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not horizontal whitespace.
        /// </summary>
        internal static string CheatSheetNotHorizontalWhitespace {
            get {
                return ResourceManager.GetString("CheatSheetNotHorizontalWhitespace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Matches any character that is not a horizontal whitespace character (spaces, tabs)..
        /// </summary>
        internal static string CheatSheetNotHorizontalWhitespaceDetails {
            get {
                return ResourceManager.GetString("CheatSheetNotHorizontalWhitespaceDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not line break.
        /// </summary>
        internal static string CheatSheetNotLineBreak {
            get {
                return ResourceManager.GetString("CheatSheetNotLineBreak", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Matches any character that is not a line break. Similar to dot (.) but is unaffected by the dotall flag (s)..
        /// </summary>
        internal static string CheatSheetNotLineBreakDetails {
            get {
                return ResourceManager.GetString("CheatSheetNotLineBreakDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not unicode category.
        /// </summary>
        internal static string CheatSheetNotUnicodeCategory {
            get {
                return ResourceManager.GetString("CheatSheetNotUnicodeCategory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Matches any character that is not in the specified unicode category..
        /// </summary>
        internal static string CheatSheetNotUnicodeCategoryDetails {
            get {
                return ResourceManager.GetString("CheatSheetNotUnicodeCategoryDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not unicode script.
        /// </summary>
        internal static string CheatSheetNotUnicodeScript {
            get {
                return ResourceManager.GetString("CheatSheetNotUnicodeScript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Matches any character that is not in the specified unicode script..
        /// </summary>
        internal static string CheatSheetNotUnicodeScriptDetails {
            get {
                return ResourceManager.GetString("CheatSheetNotUnicodeScriptDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not vertical whitespace.
        /// </summary>
        internal static string CheatSheetNotVerticalWhitespace {
            get {
                return ResourceManager.GetString("CheatSheetNotVerticalWhitespace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Matches any character that is not a vertical whitespace character (line breaks)..
        /// </summary>
        internal static string CheatSheetNotVerticalWhitespaceDetails {
            get {
                return ResourceManager.GetString("CheatSheetNotVerticalWhitespaceDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not whitespace.
        /// </summary>
        internal static string CheatSheetNotWhitespace {
            get {
                return ResourceManager.GetString("CheatSheetNotWhitespace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Matches any character that is not a whitespace character (spaces, tabs, line breaks)..
        /// </summary>
        internal static string CheatSheetNotWhitespaceDetails {
            get {
                return ResourceManager.GetString("CheatSheetNotWhitespaceDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not word.
        /// </summary>
        internal static string CheatSheetNotWord {
            get {
                return ResourceManager.GetString("CheatSheetNotWord", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not word boundary.
        /// </summary>
        internal static string CheatSheetNotWordBoundary {
            get {
                return ResourceManager.GetString("CheatSheetNotWordBoundary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Matches any position that is not a word boundary. This matches a position, not a character..
        /// </summary>
        internal static string CheatSheetNotWordBoundaryDetails {
            get {
                return ResourceManager.GetString("CheatSheetNotWordBoundaryDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Matches any character that is not a word character (alphanumeric &amp; underscore). Equivalent to [^A-Za-z0-9_].
        /// </summary>
        internal static string CheatSheetNotWordDetails {
            get {
                return ResourceManager.GetString("CheatSheetNotWordDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Null.
        /// </summary>
        internal static string CheatSheetNull {
            get {
                return ResourceManager.GetString("CheatSheetNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Matches a NULL character (char code 0)..
        /// </summary>
        internal static string CheatSheetNullDetails {
            get {
                return ResourceManager.GetString("CheatSheetNullDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Numeric reference.
        /// </summary>
        internal static string CheatSheetNumericReference {
            get {
                return ResourceManager.GetString("CheatSheetNumericReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Matches the results of a capture group. For example \1 matches the results of the first capture group &amp; \3 matches the third.
        ///There are multiple syntaxes for this feature: \1 \g1 \g{1}.
        ///
        ///The latter syntaxes support relative values preceded by + or -. For example \g-1 would match the group preceding the reference..
        /// </summary>
        internal static string CheatSheetNumericReferenceDetails {
            get {
                return ResourceManager.GetString("CheatSheetNumericReferenceDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Numeric subroutine.
        /// </summary>
        internal static string CheatSheetNumericSubroutine {
            get {
                return ResourceManager.GetString("CheatSheetNumericSubroutine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Matches the expression in a capture group. Compare this to a reference, that matches the result. For example /(a|b)\g&apos;1&apos;/ can match ab, because the expression a|b is evaluated again.
        ///There are multiple syntaxes for this feature: \g&lt;1&gt; \g&apos;1&apos; (?1).
        ///
        ///Relative values preceded by + or - are also supported. For example \g&lt;-1&gt; would match the group preceding the reference..
        /// </summary>
        internal static string CheatSheetNumericSubroutineDetails {
            get {
                return ResourceManager.GetString("CheatSheetNumericSubroutineDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Octal escape.
        /// </summary>
        internal static string CheatSheetOctalEscape {
            get {
                return ResourceManager.GetString("CheatSheetOctalEscape", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Octal escaped character in the form \000. Value must be less than 255 (\377).
        ///The syntax \o{FFF} is also supported..
        /// </summary>
        internal static string CheatSheetOctalEscapeDetails {
            get {
                return ResourceManager.GetString("CheatSheetOctalEscapeDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Optional.
        /// </summary>
        internal static string CheatSheetOptional {
            get {
                return ResourceManager.GetString("CheatSheetOptional", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Matches 0 or 1 of the preceding token, effectively making it optional..
        /// </summary>
        internal static string CheatSheetOptionalDetails {
            get {
                return ResourceManager.GetString("CheatSheetOptionalDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Plus.
        /// </summary>
        internal static string CheatSheetPlus {
            get {
                return ResourceManager.GetString("CheatSheetPlus", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Matches 1 or more of the preceding token..
        /// </summary>
        internal static string CheatSheetPlusDetails {
            get {
                return ResourceManager.GetString("CheatSheetPlusDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Positive lookahead.
        /// </summary>
        internal static string CheatSheetPositiveLookahead {
            get {
                return ResourceManager.GetString("CheatSheetPositiveLookahead", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Matches a group after the main expression without including it in the result..
        /// </summary>
        internal static string CheatSheetPositiveLookaheadDetails {
            get {
                return ResourceManager.GetString("CheatSheetPositiveLookaheadDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Positive lookbehind.
        /// </summary>
        internal static string CheatSheetPositiveLookbehind {
            get {
                return ResourceManager.GetString("CheatSheetPositiveLookbehind", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Matches a group before the main expression without including it in the result..
        /// </summary>
        internal static string CheatSheetPositiveLookbehindDetails {
            get {
                return ResourceManager.GetString("CheatSheetPositiveLookbehindDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Possessive.
        /// </summary>
        internal static string CheatSheetPossessive {
            get {
                return ResourceManager.GetString("CheatSheetPossessive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Makes the preceding quantifier possessive. It will match as many characters as possible, and will not release them to match subsequent tokens.
        ///For example /.*a/ would match aaa, but /.*+a/ would not, because the repeating dot would match and not release the last character to match a..
        /// </summary>
        internal static string CheatSheetPossessiveDetails {
            get {
                return ResourceManager.GetString("CheatSheetPossessiveDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Previous match end.
        /// </summary>
        internal static string CheatSheetPreviousMatchEnd {
            get {
                return ResourceManager.GetString("CheatSheetPreviousMatchEnd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Matches the end position of the previous match. This matches a position, not a character..
        /// </summary>
        internal static string CheatSheetPreviousMatchEndDetails {
            get {
                return ResourceManager.GetString("CheatSheetPreviousMatchEndDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Quantifier.
        /// </summary>
        internal static string CheatSheetQuantifier {
            get {
                return ResourceManager.GetString("CheatSheetQuantifier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Matches the specified quantity of the previous token. {1,3} will match 1 to 3. {3} will match exactly 3. {3,} will match 3 or more..
        /// </summary>
        internal static string CheatSheetQuantifierDetails {
            get {
                return ResourceManager.GetString("CheatSheetQuantifierDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Recursion.
        /// </summary>
        internal static string CheatSheetRecursion {
            get {
                return ResourceManager.GetString("CheatSheetRecursion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attempts to match the full expression again at the current position.
        ///For example, /a(?R)?b/ will match any number of a followed by the same number of z: the full text of az or aaaazzzz, but not azzz.
        ///
        ///There are multiple syntaxes for this feature:
        ///
        ///(?R) (?0) \g&lt;0&gt; \g&apos;0&apos;.
        /// </summary>
        internal static string CheatSheetRecursionDetails {
            get {
                return ResourceManager.GetString("CheatSheetRecursionDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reserved characters.
        /// </summary>
        internal static string CheatSheetReservedCharacters {
            get {
                return ResourceManager.GetString("CheatSheetReservedCharacters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The following character have special meaning, and should be preceded by a \ (backslash) to represent a literal character:
        ///+*?^$\.[]{}()|/
        ///
        ///Within a character set, only \, -, and ] need to be escaped..
        /// </summary>
        internal static string CheatSheetReservedCharactersDetails {
            get {
                return ResourceManager.GetString("CheatSheetReservedCharactersDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Star.
        /// </summary>
        internal static string CheatSheetStar {
            get {
                return ResourceManager.GetString("CheatSheetStar", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Matches 0 or more of the preceding token..
        /// </summary>
        internal static string CheatSheetStarDetails {
            get {
                return ResourceManager.GetString("CheatSheetStarDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Strict end of string.
        /// </summary>
        internal static string CheatSheetStrictEndOfString {
            get {
                return ResourceManager.GetString("CheatSheetStrictEndOfString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Matches the end of the string. Unlike $ or \Z, it does not allow for a trailing newline. This is unaffected by the multiline flag (m). This matches a position, not a character..
        /// </summary>
        internal static string CheatSheetStrictEndOfStringDetails {
            get {
                return ResourceManager.GetString("CheatSheetStrictEndOfStringDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Syntax.
        /// </summary>
        internal static string CheatSheetSyntax {
            get {
                return ResourceManager.GetString("CheatSheetSyntax", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tab.
        /// </summary>
        internal static string CheatSheetTab {
            get {
                return ResourceManager.GetString("CheatSheetTab", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Matches a TAB character (char code 9)..
        /// </summary>
        internal static string CheatSheetTabDetails {
            get {
                return ResourceManager.GetString("CheatSheetTabDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cheat sheet.
        /// </summary>
        internal static string CheatSheetTitle {
            get {
                return ResourceManager.GetString("CheatSheetTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unicode category.
        /// </summary>
        internal static string CheatSheetUnicodeCategory {
            get {
                return ResourceManager.GetString("CheatSheetUnicodeCategory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Matches a character in the specified unicode category. For example, \p{Ll} will match any lowercase letter..
        /// </summary>
        internal static string CheatSheetUnicodeCategoryDetails {
            get {
                return ResourceManager.GetString("CheatSheetUnicodeCategoryDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unicode escape.
        /// </summary>
        internal static string CheatSheetUnicodeEscape {
            get {
                return ResourceManager.GetString("CheatSheetUnicodeEscape", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unicode escaped character in the form \x{FF}..
        /// </summary>
        internal static string CheatSheetUnicodeEscapeDetails {
            get {
                return ResourceManager.GetString("CheatSheetUnicodeEscapeDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unicode grapheme.
        /// </summary>
        internal static string CheatSheetUnicodeGrapheme {
            get {
                return ResourceManager.GetString("CheatSheetUnicodeGrapheme", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Matches any single unicode grapheme (ie. character). This includes line breaks (regardless of the dotall mode) and graphemes encoded as multiple code points..
        /// </summary>
        internal static string CheatSheetUnicodeGraphemeDetails {
            get {
                return ResourceManager.GetString("CheatSheetUnicodeGraphemeDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unicode script.
        /// </summary>
        internal static string CheatSheetUnicodeScript {
            get {
                return ResourceManager.GetString("CheatSheetUnicodeScript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Matches any character in the specified unicode script. For example, \p{Arabic} will match characters in the Arabic script..
        /// </summary>
        internal static string CheatSheetUnicodeScriptDetails {
            get {
                return ResourceManager.GetString("CheatSheetUnicodeScriptDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Vertical whitespace.
        /// </summary>
        internal static string CheatSheetVerticalWhitespace {
            get {
                return ResourceManager.GetString("CheatSheetVerticalWhitespace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Matches any vertical whitespace character (line breaks)..
        /// </summary>
        internal static string CheatSheetVerticalWhitespaceDetails {
            get {
                return ResourceManager.GetString("CheatSheetVerticalWhitespaceDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whitespace.
        /// </summary>
        internal static string CheatSheetWhitespace {
            get {
                return ResourceManager.GetString("CheatSheetWhitespace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Matches any whitespace character (spaces, tabs, line breaks)..
        /// </summary>
        internal static string CheatSheetWhitespaceDetails {
            get {
                return ResourceManager.GetString("CheatSheetWhitespaceDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Word.
        /// </summary>
        internal static string CheatSheetWord {
            get {
                return ResourceManager.GetString("CheatSheetWord", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Word boundary.
        /// </summary>
        internal static string CheatSheetWordBoundary {
            get {
                return ResourceManager.GetString("CheatSheetWordBoundary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Matches a word boundary position between a word character and non-word character or position (start / end of string). See the word character class (w) for more info..
        /// </summary>
        internal static string CheatSheetWordBoundaryDetails {
            get {
                return ResourceManager.GetString("CheatSheetWordBoundaryDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Matches any word character (alphanumeric &amp; underscore). Only matches low-ascii characters (no accented or non-roman characters). Equivalent to [A-Za-z0-9_].
        /// </summary>
        internal static string CheatSheetWordDetails {
            get {
                return ResourceManager.GetString("CheatSheetWordDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Configuration.
        /// </summary>
        internal static string Configuration {
            get {
                return ResourceManager.GetString("Configuration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Culture Invariant.
        /// </summary>
        internal static string CultureInvariant {
            get {
                return ResourceManager.GetString("CultureInvariant", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies that cultural differences in language is ignored..
        /// </summary>
        internal static string CultureInvariantDescription {
            get {
                return ResourceManager.GetString("CultureInvariantDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Validate and test regular expressions.
        /// </summary>
        internal static string Description {
            get {
                return ResourceManager.GetString("Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ECMA Script.
        /// </summary>
        internal static string EcmaScript {
            get {
                return ResourceManager.GetString("EcmaScript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enables ECMAScript-compliant behavior for the expression. This value can be used only in conjunction with the Culture Invariant, Ignore Case and Multiline options..
        /// </summary>
        internal static string EcmaScriptDescription {
            get {
                return ResourceManager.GetString("EcmaScriptDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ignore Case.
        /// </summary>
        internal static string IgnoreCase {
            get {
                return ResourceManager.GetString("IgnoreCase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies case-insensitive matching..
        /// </summary>
        internal static string IgnoreCaseDescription {
            get {
                return ResourceManager.GetString("IgnoreCaseDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ignore Whitespace.
        /// </summary>
        internal static string IgnoreWhitespace {
            get {
                return ResourceManager.GetString("IgnoreWhitespace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Eliminates unescaped white space from the pattern and enables comments marked with #. However, this value does not affect or eliminate white space in character classes, numeric quantifiers, or tokens that mark the beginning of individual regular expression language elements..
        /// </summary>
        internal static string IgnoreWhitespaceDescription {
            get {
                return ResourceManager.GetString("IgnoreWhitespaceDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Regular Expression Tester.
        /// </summary>
        internal static string LongDisplayTitle {
            get {
                return ResourceManager.GetString("LongDisplayTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Group.
        /// </summary>
        internal static string MatchGroupPrefix {
            get {
                return ResourceManager.GetString("MatchGroupPrefix", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Match information.
        /// </summary>
        internal static string MatchInformation {
            get {
                return ResourceManager.GetString("MatchInformation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Location.
        /// </summary>
        internal static string MatchLocation {
            get {
                return ResourceManager.GetString("MatchLocation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name.
        /// </summary>
        internal static string MatchName {
            get {
                return ResourceManager.GetString("MatchName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Match.
        /// </summary>
        internal static string MatchNamePrefix {
            get {
                return ResourceManager.GetString("MatchNamePrefix", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Value.
        /// </summary>
        internal static string MatchValue {
            get {
                return ResourceManager.GetString("MatchValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multiline.
        /// </summary>
        internal static string Multiline {
            get {
                return ResourceManager.GetString("Multiline", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Changes the meaning of ^ and $ so they match at the beginning and end, respectively, of any line, and not just the beginning and end of the entire string..
        /// </summary>
        internal static string MultilineDescription {
            get {
                return ResourceManager.GetString("MultilineDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Options.
        /// </summary>
        internal static string Options {
            get {
                return ResourceManager.GetString("Options", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Regular expression.
        /// </summary>
        internal static string RegularExpression {
            get {
                return ResourceManager.GetString("RegularExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Right To Left.
        /// </summary>
        internal static string RightToLeft {
            get {
                return ResourceManager.GetString("RightToLeft", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies that the search will be from right to left instead of from left to right..
        /// </summary>
        internal static string RightToLeftDescription {
            get {
                return ResourceManager.GetString("RightToLeftDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to regular expression.
        /// </summary>
        internal static string SearchKeywords {
            get {
                return ResourceManager.GetString("SearchKeywords", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to RegEx.
        /// </summary>
        internal static string ShortDisplayTitle {
            get {
                return ResourceManager.GetString("ShortDisplayTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Singleline.
        /// </summary>
        internal static string Singleline {
            get {
                return ResourceManager.GetString("Singleline", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Changes the meaning of the dot (.) so it matches every character (instead of every character except \n)..
        /// </summary>
        internal static string SinglelineDescription {
            get {
                return ResourceManager.GetString("SinglelineDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Text.
        /// </summary>
        internal static string Text {
            get {
                return ResourceManager.GetString("Text", resourceCulture);
            }
        }
    }
}
