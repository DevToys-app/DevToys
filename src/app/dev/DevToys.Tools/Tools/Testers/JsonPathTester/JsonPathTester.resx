<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccessibleName" xml:space="preserve">
    <value>JSONPath Tester tool</value>
  </data>
  <data name="CheatSheetArraySliceOperator" xml:space="preserve">
    <value>Array slice operator</value>
  </data>
  <data name="CheatSheetBracketNotedChildOperator" xml:space="preserve">
    <value>Bracket-notated child or children</value>
  </data>
  <data name="CheatSheetCurrentObjectElement" xml:space="preserve">
    <value>Used for filter expressions. Refers to the current node for further processing.</value>
  </data>
  <data name="CheatSheetDescription" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="CheatSheetDotNotedChildOperator" xml:space="preserve">
    <value>Dot-notated child</value>
  </data>
  <data name="CheatSheetFilterExpression" xml:space="preserve">
    <value>Selects all elements in an object or array that match the specified boolean expression. Returns a list.</value>
  </data>
  <data name="CheatSheetRecursiveDescent" xml:space="preserve">
    <value>Performs a deep scan for the specified property in all available objects. Always returns a list, even for a single match.</value>
  </data>
  <data name="CheatSheetRootObjectElement" xml:space="preserve">
    <value>The root object or array.</value>
  </data>
  <data name="CheatSheetScriptExpression" xml:space="preserve">
    <value>Script expression.</value>
  </data>
  <data name="CheatSheetSubscriptOperator" xml:space="preserve">
    <value>Selects the n-th element from an array. Indexes start from 0.</value>
  </data>
  <data name="CheatSheetSyntax" xml:space="preserve">
    <value>Syntax</value>
  </data>
  <data name="CheatSheetTitle" xml:space="preserve">
    <value>Cheat sheet</value>
  </data>
  <data name="CheatSheetUnionOperator" xml:space="preserve">
    <value>Selects n1 and n2 array items. Returns a list.</value>
  </data>
  <data name="CheatSheetWildcard" xml:space="preserve">
    <value>Wildcard. Selects all elements in an object or array, regardless of their names or indexes.</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Test a JSONPath</value>
  </data>
  <data name="InputFileNotFound" xml:space="preserve">
    <value>Input file selected doesn't exist.</value>
  </data>
  <data name="InputJsonOptionDescription" xml:space="preserve">
    <value>Text or path to a file containing the JSON</value>
  </data>
  <data name="InputJsonPathOptionDescription" xml:space="preserve">
    <value>Text or path to a file containing the JSONPath</value>
  </data>
  <data name="InputJsonPathTitle" xml:space="preserve">
    <value>JSONPath</value>
  </data>
  <data name="InputTitle" xml:space="preserve">
    <value>JSON</value>
  </data>
  <data name="InvalidInputOrFileCommand" xml:space="preserve">
    <value>Please specify an input text or an input file</value>
  </data>
  <data name="LongDisplayTitle" xml:space="preserve">
    <value>JSONPath Tester</value>
  </data>
  <data name="NoMatchFound" xml:space="preserve">
    <value>No match found</value>
  </data>
  <data name="Output" xml:space="preserve">
    <value>Test result</value>
  </data>
  <data name="OutputFileOptionDescription" xml:space="preserve">
    <value>Path to the output file</value>
  </data>
  <data name="SearchKeywords" xml:space="preserve">
    <value>path json</value>
  </data>
  <data name="ShortDisplayTitle" xml:space="preserve">
    <value>JSONPath</value>
  </data>
</root>