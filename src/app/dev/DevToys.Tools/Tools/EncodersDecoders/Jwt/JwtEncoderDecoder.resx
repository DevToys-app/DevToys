<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccessibleName" xml:space="preserve">
    <value>JWT Encoder and Decoder tool</value>
    <comment>Gui</comment>
  </data>
  <data name="alg" xml:space="preserve">
    <value>Indicates the algorithm used to sign the token</value>
    <comment>Claim</comment>
  </data>
  <data name="AlgorithmInvalid" xml:space="preserve">
    <value>Unknown token algorithm</value>
    <comment>Error message</comment>
  </data>
  <data name="ClaimDescriptionTitle" xml:space="preserve">
    <value>Description</value>
    <comment>Gui</comment>
  </data>
  <data name="ClaimTypeTitle" xml:space="preserve">
    <value>Type</value>
    <comment>Gui</comment>
  </data>
  <data name="ClaimValueTitle" xml:space="preserve">
    <value>Value</value>
    <comment>Gui</comment>
  </data>
  <data name="ConfigurationTitle" xml:space="preserve">
    <value>Configuration</value>
    <comment>Gui</comment>
  </data>
  <data name="DecodeMode" xml:space="preserve">
    <value>Decode</value>
    <comment>Gui</comment>
  </data>
  <data name="DecodeValidateTokenActorsTitle" xml:space="preserve">
    <value>Validate actors</value>
    <comment>Gui</comment>
  </data>
  <data name="DecodeValidateTokenAudiencesInputLabel" xml:space="preserve">
    <value>Token audiences (separated by comma)</value>
    <comment>Gui</comment>
  </data>
  <data name="DecodeValidateTokenAudiencesTitle" xml:space="preserve">
    <value>Validate audiences</value>
    <comment>Gui</comment>
  </data>
  <data name="DecodeValidateTokenIssuersInputLabel" xml:space="preserve">
    <value>Token issuers (separated by comma)</value>
    <comment>Gui</comment>
  </data>
  <data name="DecodeValidateTokenIssuersSigningKeyTitle" xml:space="preserve">
    <value>Validate issuers signing key</value>
    <comment>Gui</comment>
  </data>
  <data name="DecodeValidateTokenIssuersTitle" xml:space="preserve">
    <value>Validate issuers</value>
    <comment>Gui</comment>
  </data>
  <data name="DecodeValidateTokenLifetimeTitle" xml:space="preserve">
    <value>Validate lifetime</value>
    <comment>Gui</comment>
  </data>
  <data name="DecodeValidateTokenSettingsDescription" xml:space="preserve">
    <value>Select which token parameters to validate</value>
    <comment>Gui</comment>
  </data>
  <data name="DecodeValidateTokenSettingsTitle" xml:space="preserve">
    <value>Token validation settings</value>
    <comment>Gui</comment>
  </data>
  <data name="DecodeValidateTokenTitle" xml:space="preserve">
    <value>Validate Token</value>
    <comment>Gui</comment>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Encode and decode Json Web Token </value>
    <comment>Gui</comment>
  </data>
  <data name="EncodeMode" xml:space="preserve">
    <value>Encode</value>
    <comment>Gui</comment>
  </data>
  <data name="HeaderInputTitle" xml:space="preserve">
    <value>Header</value>
    <comment>Gui</comment>
  </data>
  <data name="HeaderInvalid" xml:space="preserve">
    <value>Unable to process the token header</value>
    <comment>Error message</comment>
  </data>
  <data name="kid" xml:space="preserve">
    <value>Specifies the thumbprint for the public key used for validating the signature of the token.</value>
    <comment>Claim</comment>
  </data>
  <data name="LongDisplayTitle" xml:space="preserve">
    <value>JWT Encoder / Decoder</value>
    <comment>Gui</comment>
  </data>
  <data name="No" xml:space="preserve">
    <value>No</value>
    <comment>Gui</comment>
  </data>
  <data name="PayloadInputTitle" xml:space="preserve">
    <value>Payload</value>
    <comment>Gui</comment>
  </data>
  <data name="PayloadInvalid" xml:space="preserve">
    <value>Unable to process the token payload</value>
    <comment>Error message</comment>
  </data>
  <data name="PublicKeyInputTitle" xml:space="preserve">
    <value>Public Key</value>
    <comment>Gui</comment>
  </data>
  <data name="PublicKeyInvalid" xml:space="preserve">
    <value>Public key is either null or empty</value>
    <comment>Error message</comment>
  </data>
  <data name="PublicKeyNotSupported" xml:space="preserve">
    <value>This type of public key is not supported</value>
    <comment>Error message</comment>
  </data>
  <data name="ShortDisplayTitle" xml:space="preserve">
    <value>JWT</value>
    <comment>Gui</comment>
  </data>
  <data name="SignatureInputTitle" xml:space="preserve">
    <value>Signature</value>
    <comment>Gui</comment>
  </data>
  <data name="SignatureInvalid" xml:space="preserve">
    <value>Unable to process the token signature</value>
    <comment>Error message</comment>
  </data>
  <data name="sub" xml:space="preserve">
    <value>The "sub" (subject) claim identifies the principal that is the subject of the JWT. The claims in a JWT are normally statements about the subject.  The subject value MUST either be scoped to be locally unique in the context of the issuer or be globally unique. The processing of this claim is generally application specific. The "sub" value is a case-sensitive string containing a StringOrURI value.  Use of this claim is OPTIONAL.</value>
    <comment>Claim</comment>
  </data>
  <data name="TokenInputTitle" xml:space="preserve">
    <value>Token</value>
    <comment>Gui</comment>
  </data>
  <data name="TokenNotValidated" xml:space="preserve">
    <value>Token not validated (no parameters selected)</value>
    <comment>Error message</comment>
  </data>
  <data name="ToolModeDescription" xml:space="preserve">
    <value>Select which mode you want to use</value>
    <comment>Gui</comment>
  </data>
  <data name="ToolModeTitle" xml:space="preserve">
    <value>Tool Mode</value>
    <comment>Gui</comment>
  </data>
  <data name="typ" xml:space="preserve">
    <value>Indicates the token type</value>
    <comment>Claim</comment>
  </data>
  <data name="ValidAudiencesEmptyError" xml:space="preserve">
    <value>Valid audiences are empty</value>
    <comment>Error message</comment>
  </data>
  <data name="ValidIssuersEmptyError" xml:space="preserve">
    <value>Valid issuers are empty</value>
    <comment>Error message</comment>
  </data>
  <data name="x5t" xml:space="preserve">
    <value>Functions the same as "kid". "x5t" is a legacy claim emitted only in v1.0 access tokens for compatibility purposes.</value>
    <comment>Claim</comment>
  </data>
  <data name="Yes" xml:space="preserve">
    <value>Yes</value>
    <comment>Gui</comment>
  </data>
</root>