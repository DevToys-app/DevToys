//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DevToys.Tools.Tools.EncodersDecoders.JsonWebToken {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class JsonWebTokenEncoderDecoder {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal JsonWebTokenEncoderDecoder() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("DevToys.Tools.Tools.EncodersDecoders.JsonWebToken.JsonWebTokenEncoderDecoder", typeof(JsonWebTokenEncoderDecoder).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to JWT Encoder and Decoder tool.
        /// </summary>
        internal static string AccessibleName {
            get {
                return ResourceManager.GetString("AccessibleName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &quot;acr&quot; claim with a value of 0 indicates the end-user authentication didn&apos;t meet the requirements of ISO/IEC 29115..
        /// </summary>
        internal static string acr {
            get {
                return ResourceManager.GetString("acr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &quot;acrs&quot; claim indicates the Auth Context IDs of the operations that the bearer is eligible to perform. Auth Context IDs can be used to trigger a demand for step-up authentication from within your application and services. Often used along with the xms_cc claim..
        /// </summary>
        internal static string acrs {
            get {
                return ResourceManager.GetString("acrs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &quot;aio&quot; claim is an internal claim used by Microsoft Entra ID to record data for token reuse. Resources shouldn&apos;t use this claim..
        /// </summary>
        internal static string aio {
            get {
                return ResourceManager.GetString("aio", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates the algorithm used to sign the token.
        /// </summary>
        internal static string alg {
            get {
                return ResourceManager.GetString("alg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unknown token algorithm.
        /// </summary>
        internal static string AlgorithmInvalidEncodeTokenHasDefaultTimeTitle {
            get {
                return ResourceManager.GetString("AlgorithmInvalidEncodeTokenHasDefaultTimeTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &quot;amr&quot; claim identifies the authentication method of the subject of the token..
        /// </summary>
        internal static string amr {
            get {
                return ResourceManager.GetString("amr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &quot;appid&quot; claim indicate the application ID of the client using the token. The application can act as itself or on behalf of a user. The application ID typically represents an application object, but it can also represent a service principal object in Microsoft Entra ID..
        /// </summary>
        internal static string appid {
            get {
                return ResourceManager.GetString("appid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &quot;appidacr&quot; claim indicate the authentication method of the client. For a public client, the value is 0. When you use the client ID and client secret, the value is 1. When you use a client certificate for authentication, the value is 2..
        /// </summary>
        internal static string appidacr {
            get {
                return ResourceManager.GetString("appidacr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &quot;aud&quot; (audience) claim identifies the recipients that the JWT is intended for. Each principal intended to process the JWT MUST identify itself with a value in the audience claim. If the principal processing the claim does not identify itself with a value in the &quot;aud&quot; claim when this claim is present, then the JWT MUST be rejected. In the general case, the &quot;aud&quot; value is an array of case- sensitive strings, each containing a StringOrURI value. In the special case when the JWT has one audience, the &quot;aud&quot;  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string aud {
            get {
                return ResourceManager.GetString("aud", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &quot;azp&quot; claim is a replacement for appid. The application ID of the client using the token. The application can act as itself or on behalf of a user. The application ID typically represents an application object, but it can also represent a service principal object in Microsoft Entra ID..
        /// </summary>
        internal static string azp {
            get {
                return ResourceManager.GetString("azp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &quot;azpacr&quot; claim is a replacement for appidacr. Indicates the authentication method of the client. For a public client, the value is 0. When you use the client ID and client secret, the value is 1. When you use a client certificate for authentication, the value is 2..
        /// </summary>
        internal static string azpacr {
            get {
                return ResourceManager.GetString("azpacr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Description.
        /// </summary>
        internal static string ClaimDescriptionTitle {
            get {
                return ResourceManager.GetString("ClaimDescriptionTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type.
        /// </summary>
        internal static string ClaimTypeTitle {
            get {
                return ResourceManager.GetString("ClaimTypeTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Value.
        /// </summary>
        internal static string ClaimValueTitle {
            get {
                return ResourceManager.GetString("ClaimValueTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Configuration.
        /// </summary>
        internal static string ConfigurationTitle {
            get {
                return ResourceManager.GetString("ConfigurationTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Decode.
        /// </summary>
        internal static string DecodeMode {
            get {
                return ResourceManager.GetString("DecodeMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Validate actors.
        /// </summary>
        internal static string DecodeValidateTokenActorsTitle {
            get {
                return ResourceManager.GetString("DecodeValidateTokenActorsTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Token audiences (separated by comma).
        /// </summary>
        internal static string DecodeValidateTokenAudiencesInputLabel {
            get {
                return ResourceManager.GetString("DecodeValidateTokenAudiencesInputLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Validate audiences.
        /// </summary>
        internal static string DecodeValidateTokenAudiencesTitle {
            get {
                return ResourceManager.GetString("DecodeValidateTokenAudiencesTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Token issuer (separated by comma).
        /// </summary>
        internal static string DecodeValidateTokenIssuerInputLabel {
            get {
                return ResourceManager.GetString("DecodeValidateTokenIssuerInputLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Validate issuer signing key.
        /// </summary>
        internal static string DecodeValidateTokenIssuerSigningKeyTitle {
            get {
                return ResourceManager.GetString("DecodeValidateTokenIssuerSigningKeyTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Validate issuer.
        /// </summary>
        internal static string DecodeValidateTokenIssuerTitle {
            get {
                return ResourceManager.GetString("DecodeValidateTokenIssuerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Validate lifetime.
        /// </summary>
        internal static string DecodeValidateTokenLifetimeTitle {
            get {
                return ResourceManager.GetString("DecodeValidateTokenLifetimeTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select which token parameters to validate.
        /// </summary>
        internal static string DecodeValidateTokenSettingsDescription {
            get {
                return ResourceManager.GetString("DecodeValidateTokenSettingsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Token validation settings.
        /// </summary>
        internal static string DecodeValidateTokenSettingsTitle {
            get {
                return ResourceManager.GetString("DecodeValidateTokenSettingsTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Validate Token.
        /// </summary>
        internal static string DecodeValidateTokenTitle {
            get {
                return ResourceManager.GetString("DecodeValidateTokenTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Encode and decode Json Web Token .
        /// </summary>
        internal static string Description {
            get {
                return ResourceManager.GetString("Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Encode.
        /// </summary>
        internal static string EncodeMode {
            get {
                return ResourceManager.GetString("EncodeMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Token hashing algorithm.
        /// </summary>
        internal static string EncodeTokenAlgorithmTitle {
            get {
                return ResourceManager.GetString("EncodeTokenAlgorithmTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Token audience (separated by comma).
        /// </summary>
        internal static string EncodeTokenAudienceInputTitle {
            get {
                return ResourceManager.GetString("EncodeTokenAudienceInputTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expire in day(s).
        /// </summary>
        internal static string EncodeTokenExpirationDayInputTitle {
            get {
                return ResourceManager.GetString("EncodeTokenExpirationDayInputTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expire in hour(s).
        /// </summary>
        internal static string EncodeTokenExpirationHourInputTitle {
            get {
                return ResourceManager.GetString("EncodeTokenExpirationHourInputTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expire in minute(s).
        /// </summary>
        internal static string EncodeTokenExpirationMinuteInputTitle {
            get {
                return ResourceManager.GetString("EncodeTokenExpirationMinuteInputTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expire in month(s).
        /// </summary>
        internal static string EncodeTokenExpirationMonthInputTitle {
            get {
                return ResourceManager.GetString("EncodeTokenExpirationMonthInputTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expire in year(s).
        /// </summary>
        internal static string EncodeTokenExpirationYearInputTitle {
            get {
                return ResourceManager.GetString("EncodeTokenExpirationYearInputTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Token has audience.
        /// </summary>
        internal static string EncodeTokenHasAudienceTitle {
            get {
                return ResourceManager.GetString("EncodeTokenHasAudienceTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Token has default time.
        /// </summary>
        internal static string EncodeTokenHasDefaultTimeTitle {
            get {
                return ResourceManager.GetString("EncodeTokenHasDefaultTimeTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Token has expiration.
        /// </summary>
        internal static string EncodeTokenHasExpirationTitle {
            get {
                return ResourceManager.GetString("EncodeTokenHasExpirationTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Token has issuer.
        /// </summary>
        internal static string EncodeTokenHasIssuerTitle {
            get {
                return ResourceManager.GetString("EncodeTokenHasIssuerTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Token issuer (separated by comma).
        /// </summary>
        internal static string EncodeTokenIssuerInputTitle {
            get {
                return ResourceManager.GetString("EncodeTokenIssuerInputTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select token parameters.
        /// </summary>
        internal static string EncodeTokenSettingsDescription {
            get {
                return ResourceManager.GetString("EncodeTokenSettingsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Settings.
        /// </summary>
        internal static string EncodeTokenSettingsTitle {
            get {
                return ResourceManager.GetString("EncodeTokenSettingsTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &quot;exp&quot; (expiration time) claim identifies the expiration time on or after which the JWT MUST NOT be accepted for processing. The processing of the &quot;exp&quot; claim requires that the current date/time MUST be before the expiration date/time listed in the &quot;exp&quot; claim. Implementers MAY provide for some small leeway, usually no more than a few minutes, to account for clock skew. Its value MUST be a number containing a NumericDate value. Use of this claim is OPTIONAL..
        /// </summary>
        internal static string exp {
            get {
                return ResourceManager.GetString("exp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &quot;groups&quot; claim provides object IDs that represent the group memberships of the subject. The groupMembershipClaims property of the application manifest configures the groups claim on a per-application basis. A value of null excludes all groups, a value of SecurityGroup includes only Active Directory Security Group memberships, and a value of All includes both Security Groups and Microsoft 365 Distribution Lists.See the hasgroups claim for details on using the groups claim with the implicit grant. For oth [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string groups {
            get {
                return ResourceManager.GetString("groups", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &quot;groups:src1&quot; claim includes a link to the full groups list for the user when token requests are too large for the token. For JWTs as a distributed claim, for SAML as a new claim in place of the groups claim.Example JWT Value:&quot;groups&quot;:&quot;src1&quot;&quot;_claim_sources: &quot;src1&quot; : { &quot;endpoint&quot; : &quot;https://graph.microsoft.com/v1.0/users/{userID}/getMemberObjects&quot; }.
        /// </summary>
        internal static string groups_src1 {
            get {
                return ResourceManager.GetString("groups:src1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If present, always true, indicates whether the user is in at least one group. Used in place of the groups claim for JWTs in implicit grant flows if the full groups claim would extend the URI fragment beyond the URL length limits (currently six or more groups). Indicates that the client should use the Microsoft Graph API to determine the groups (https://graph.microsoft.com/v1.0/users/{userID}/getMemberObjects) of the user..
        /// </summary>
        internal static string hasgroups {
            get {
                return ResourceManager.GetString("hasgroups", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Header.
        /// </summary>
        internal static string HeaderInputTitle {
            get {
                return ResourceManager.GetString("HeaderInputTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &quot;iat&quot; (issued at) claim identifies the time at which the JWT was issued. This claim can be used to determine the age of the JWT. Its value MUST be a number containing a NumericDate value. Use of this claim is OPTIONAL..
        /// </summary>
        internal static string iat {
            get {
                return ResourceManager.GetString("iat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &quot;idp&quot; claim records the identity provider that authenticated the subject of the token. This value is identical to the value of the Issuer claim unless the user account isn&apos;t in the same tenant as the issuer, such as guests. Use the value of iss if the claim isn&apos;t present..
        /// </summary>
        internal static string idp {
            get {
                return ResourceManager.GetString("idp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expiartion Date is invalid.
        /// </summary>
        internal static string InvalidExpiration {
            get {
                return ResourceManager.GetString("InvalidExpiration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to process the token header.
        /// </summary>
        internal static string InvalidHeader {
            get {
                return ResourceManager.GetString("InvalidHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to process the token payload.
        /// </summary>
        internal static string InvalidPayload {
            get {
                return ResourceManager.GetString("InvalidPayload", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Private key is either null or empty.
        /// </summary>
        internal static string InvalidPrivateKey {
            get {
                return ResourceManager.GetString("InvalidPrivateKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Public key is either null or empty.
        /// </summary>
        internal static string InvalidPublicKey {
            get {
                return ResourceManager.GetString("InvalidPublicKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to process the token signature.
        /// </summary>
        internal static string InvalidSignature {
            get {
                return ResourceManager.GetString("InvalidSignature", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &quot;iss&quot; (issuer) claim identifies the principal that issued the JWT. The processing of this claim is generally application specific. The &quot;iss&quot; value is a case-sensitive string containing a StringOrURI value. Use of this claim is OPTIONAL..
        /// </summary>
        internal static string iss {
            get {
                return ResourceManager.GetString("iss", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &quot;jti&quot; (JWT ID) claim provides a unique identifier for the JWT. The identifier value MUST be assigned in a manner that ensures that there is a negligible probability that the same value will be accidentally assigned to a different data object; if the application uses multiple issuers, collisions MUST be prevented among values produced by different issuers as well. The &quot;jti&quot; claim can be used to prevent the JWT from being replayed. The &quot;jti&quot; value is a case- sensitive string. Use of this claim is OPTIONAL [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string jti {
            get {
                return ResourceManager.GetString("jti", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the thumbprint for the public key used for validating the signature of the token..
        /// </summary>
        internal static string kid {
            get {
                return ResourceManager.GetString("kid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to JWT Encoder / Decoder.
        /// </summary>
        internal static string LongDisplayTitle {
            get {
                return ResourceManager.GetString("LongDisplayTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &quot;name&quot; claim provides a human-readable value that identifies the subject of the token. The value can vary, it&apos;s mutable, and is for display purposes only. To receive this claim, use the profile scope..
        /// </summary>
        internal static string name {
            get {
                return ResourceManager.GetString("name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &quot;nbf&quot; (not before) claim identifies the time before which the JWT MUST NOT be accepted for processing. The processing of the &quot;nbf&quot; claim requires that the current date/time MUST be after or equal to the not-before date/time listed in the &quot;nbf&quot; claim. Implementers MAY provide for some small leeway, usually no more than a few minutes, to account for clock skew. Its value MUST be a number containing a NumericDate value. Use of this claim is OPTIONAL..
        /// </summary>
        internal static string nbf {
            get {
                return ResourceManager.GetString("nbf", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No.
        /// </summary>
        internal static string No {
            get {
                return ResourceManager.GetString("No", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The immutable identifier for the requestor, which is the verified identity of the user or service principal. This ID uniquely identifies the requestor across applications. Two different applications signing in the same user receive the same value in the oid claim. The oid can be used when making queries to Microsoft online services, such as the Microsoft Graph. The Microsoft Graph returns this ID as the id property for a given user account. Because the oid allows multiple applications to correlate principal [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string oid {
            get {
                return ResourceManager.GetString("oid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Payload.
        /// </summary>
        internal static string PayloadInputTitle {
            get {
                return ResourceManager.GetString("PayloadInputTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &quot;preferred_username&quot; claim indicate the primary username that represents the user. The value could be an email address, phone number, or a generic username without a specified format. Use the value for username hints and in human-readable UI as a username. To receive this claim, use the profile scope..
        /// </summary>
        internal static string preferred_username {
            get {
                return ResourceManager.GetString("preferred_username", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Private Key.
        /// </summary>
        internal static string PrivateKeyInputTitle {
            get {
                return ResourceManager.GetString("PrivateKeyInputTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This type of privatec key is not supported.
        /// </summary>
        internal static string PrivateKeyNotSupported {
            get {
                return ResourceManager.GetString("PrivateKeyNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Public Key.
        /// </summary>
        internal static string PublicKeyInputTitle {
            get {
                return ResourceManager.GetString("PublicKeyInputTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This type of public key is not supported.
        /// </summary>
        internal static string PublicKeyNotSupported {
            get {
                return ResourceManager.GetString("PublicKeyNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &quot;rh&quot; claim is an internal claim used by Azure to revalidate tokens. Resources shouldn&apos;t use this claim..
        /// </summary>
        internal static string rh {
            get {
                return ResourceManager.GetString("rh", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &quot;roles&quot; claim indicate the set of permissions exposed by the application that the requesting application or user has been given permission to call. The client credential flow uses this set of permission in place of user scopes for application tokens. For user tokens, this set of values contains the assigned roles of the user on the target application..
        /// </summary>
        internal static string roles {
            get {
                return ResourceManager.GetString("roles", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &quot;scp&quot; claim indicate the set of scopes exposed by the application for which the client application has requested (and received) consent. Only included for user tokens..
        /// </summary>
        internal static string scp {
            get {
                return ResourceManager.GetString("scp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to JWT.
        /// </summary>
        internal static string ShortDisplayTitle {
            get {
                return ResourceManager.GetString("ShortDisplayTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Signature.
        /// </summary>
        internal static string SignatureInputTitle {
            get {
                return ResourceManager.GetString("SignatureInputTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &quot;sub&quot; (subject) claim identifies the principal that is the subject of the JWT. The claims in a JWT are normally statements about the subject.  The subject value MUST either be scoped to be locally unique in the context of the issuer or be globally unique. The processing of this claim is generally application specific. The &quot;sub&quot; value is a case-sensitive string containing a StringOrURI value.  Use of this claim is OPTIONAL..
        /// </summary>
        internal static string sub {
            get {
                return ResourceManager.GetString("sub", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &quot;tid&quot; claim represents the tenant that the user is signing in to. For work and school accounts, the GUID is the immutable tenant ID of the organization that the user is signing in to..
        /// </summary>
        internal static string tid {
            get {
                return ResourceManager.GetString("tid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Token.
        /// </summary>
        internal static string TokenInputTitle {
            get {
                return ResourceManager.GetString("TokenInputTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Token not validated (no parameters selected).
        /// </summary>
        internal static string TokenNotValidated {
            get {
                return ResourceManager.GetString("TokenNotValidated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select which mode you want to use.
        /// </summary>
        internal static string ToolModeDescription {
            get {
                return ResourceManager.GetString("ToolModeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tool Mode.
        /// </summary>
        internal static string ToolModeTitle {
            get {
                return ResourceManager.GetString("ToolModeTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates the token type.
        /// </summary>
        internal static string typ {
            get {
                return ResourceManager.GetString("typ", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &quot;unique_name&quot; claim provides a human readable value that identifies the subject of the token..
        /// </summary>
        internal static string unique_name {
            get {
                return ResourceManager.GetString("unique_name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &quot;uti&quot; claim (Token identifier claim), is equivalent to &quot;jti&quot; in the JWT specification. Unique, per-token identifier that is case-sensitive..
        /// </summary>
        internal static string uti {
            get {
                return ResourceManager.GetString("uti", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Audiences are empty or invalid.
        /// </summary>
        internal static string ValidAudiencesEmptyError {
            get {
                return ResourceManager.GetString("ValidAudiencesEmptyError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Issuers are empty or invalid.
        /// </summary>
        internal static string ValidIssuersEmptyError {
            get {
                return ResourceManager.GetString("ValidIssuersEmptyError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Token Validated.
        /// </summary>
        internal static string ValidToken {
            get {
                return ResourceManager.GetString("ValidToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &quot;ver&quot; claim indicates the version of the access token..
        /// </summary>
        internal static string ver {
            get {
                return ResourceManager.GetString("ver", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &quot;wids&quot; claim denotes the tenant-wide roles assigned to this user, from the section of roles present in Microsoft Entra built-in roles. The groupMembershipClaims property of the application manifest configures this claim on a per-application basis. Set the claim to All or DirectoryRole. May not be present in tokens obtained through the implicit flow due to token length concerns..
        /// </summary>
        internal static string wids {
            get {
                return ResourceManager.GetString("wids", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Functions the same as &quot;kid&quot;. &quot;x5t&quot; is a legacy claim emitted only in v1.0 access tokens for compatibility purposes..
        /// </summary>
        internal static string x5t {
            get {
                return ResourceManager.GetString("x5t", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &quot;xms_cc&quot; claim indicates whether the client application that acquired the token is capable of handling claims challenges. It&apos;s often used along with claim acrs. This claim is commonly used in Conditional Access and Continuous Access Evaluation scenarios. The resource server or service application that the token is issued for controls the presence of this claim in a token. A value of cp1 in the access token is the authoritative way to identify that a client application is capable of handling a claims cha [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string xms_cc {
            get {
                return ResourceManager.GetString("xms_cc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Yes.
        /// </summary>
        internal static string Yes {
            get {
                return ResourceManager.GetString("Yes", resourceCulture);
            }
        }
    }
}
