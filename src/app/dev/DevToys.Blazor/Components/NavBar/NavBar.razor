@namespace DevToys.Blazor.Components
@using DevToys.Core.Tools.ViewItems;
@using DevToys.Core;

@inherits JSStyledComponentBase
@typeparam TElement

<CascadingValue Value="this" IsFixed="true">
    <div id=@Id
         class="nav-bar-root @(_sidebarState.NavBarClassNames) @(FinalCssClasses)"
         style="@(Style)"
         @ref=Element
         @attributes="AdditionalAttributes">

        <!-- Header -->
        <div class="header">
            <Button Appearance="ButtonAppearance.Stealth"
                    Class="button-icon"
                    Style="margin: 5px 0px 0px 5px;"
                    IsEnabled="@CanGoBack"
                    title="Back"
                    aria-label="Back"
                    @onclick="OnBackButtonClicked">
                <FontIcon Glyph="@('\uF15B')" />
            </Button>
            @if (_sidebarState.IsHidden)
            {
                <Button Appearance="ButtonAppearance.Stealth"
                        Class="button-icon"
                        title="Toggle Navigation"
                        aria-label="Toggle Navigation"
                        aria-controls="@NavId"
                        aria-expanded="@_sidebarState.IsCollapsed"
                    @onclick="OnToggleSidebarClick">
                    <FontIcon Glyph="@('\uF560')" />
                </Button>
            }

            <div style="margin-left: 4px; display: inline;">
                @Header
            </div>
        </div>

        <!-- Sidebar -->
        <nav id="@NavId" class="@(_sidebarState.NavBarClassNames)">
            <div class="sidebar-header">
                @if (!_sidebarState.IsHidden)
                {
                    <Button Appearance="ButtonAppearance.Stealth"
                            Class="button-icon"
                            Style="margin: 0px 4px 0px 5px;"
                            title="Toggle Navigation"
                            aria-label="Toggle Navigation"
                            aria-controls="@NavId"
                            aria-expanded="@_sidebarState.IsCollapsed"
                            @onclick="OnToggleSidebarClick">
                        <FontIcon Glyph="@('\uF560')" />
                    </Button>
                }

                @{
                    string searchButtonStyle = $"margin: 6px 4px 8px 5px; {(_sidebarState.IsCollapsed ? string.Empty : "display: none;")}";
                    string searchTextBoxStyle = $"margin: 6px 17px 12px 16px; {(_sidebarState.IsCollapsed ? "display: none;" : string.Empty)}";

                    <Button Appearance="ButtonAppearance.Stealth"
                            Class="button-icon"
                            Style="@searchButtonStyle"
                            title="Click to search"
                            aria-label="Search"
                            @onclick="OnSearchButtonClick">
                        <FontIcon Glyph="@('\uF68F')" />
                    </Button>
                    <AutoSuggestBox @ref="_autoSuggestBox"
                             Style="@searchTextBoxStyle"
                             Placeholder="Type to search for tools...">
                    </AutoSuggestBox>
                }

            </div>
            <div class="sidebar-body">
                <ScrollViewer Orientation="Orientation.Vertical">
                    <ul class="sidebar-items">
                        @if (MenuItemsSource is not null)
                        {
                            @foreach (TElement item in MenuItemsSource)
                            {
                                <NavBarItem Item="item"
                                            OwnerNavBar="@this"
                                            TElement="TElement"
                                            TitleTemplate="NavBarItemTitleTemplate"
                                            IconTemplate="NavBarItemIconTemplate"
                                            Children="item is IGroup itemGroup ? itemGroup.ChildrenItems : null"
                                            OnSelected="OnItemSelectedAsync"/>
                            }
                        }
                    </ul>
                </ScrollViewer>
            </div>
            <div class="sidebar-footer">
                <ul class="sidebar-items">
                    @if (FooterMenuItemsSource is not null)
                    {
                        <li class="sidebar-item-separator" style="margin-top: 0px;"/>
                        @foreach (TElement item in FooterMenuItemsSource)
                        {
                            <NavBarItem Item="item"
                                        OwnerNavBar="@this"
                                        TElement="TElement"
                                        TitleTemplate="NavBarItemTitleTemplate"
                                        IconTemplate="NavBarItemIconTemplate"
                                        Children="item is IGroup itemGroup ? itemGroup.ChildrenItems : null"
                                        OnSelected="OnItemSelectedAsync" />
                        }
                    }
                </ul>
            </div>
        </nav>

        <!-- Content of the nav bar -->
        <main>
            @Content
        </main>

        <!-- A transparent clickable area that appears when the sidebar is expanded overlay. Clicking on it will close the sidebar. -->
        <Overlay Visible="_sidebarState.IsExpandedOverlay"
                 ZIndex="@(10_000 - 1)"
                 OnClick="OnCloseExpandedOverlaySidebarClick" />
    </div>
</CascadingValue>