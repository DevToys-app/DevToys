@namespace DevToys.Blazor.Components.UIElements
@using DevToys.Api;
@inherits MefComponentBase

<!-- TODO: Localize -->
<Grid id="@ExtendedId"
      Class="ui-text-input-wrapper"
      IsVisible="@UITextInput.IsVisible"
      IsEnabled="@UITextInput.IsEnabled"
      HorizontalAlignment="@UITextInput.HorizontalAlignment"
      VerticalAlignment="@UITextInput.VerticalAlignment"
      RowSpacing="6"
      Rows="@(new List<GridLength>
        {
            GridLength.Auto,
            new GridLength(1, GridUnitType.Fraction)
        })"
      ColumnSpacing="6"
      Columns="@(new List<GridLength>
        {
            new GridLength(1, GridUnitType.Fraction),
            GridLength.Auto
        })">
    <GridCell Row="0" Column="0">
        <Grid RowSpacing="0"
              Rows="@(new List<GridLength>
                {
                    new GridLength(1, GridUnitType.Fraction),
                    new GridLength(20, GridUnitType.Pixel)
                })">
            <GridCell Row="1">
                <TextBlock id="@(ExtendedId + "-title")"
                           Text="@UITextInput.Title"
                           NoWrap="true"
                           CanTrim="true" />
            </GridCell>
        </Grid>
    </GridCell>
    <GridCell Row="0"
              Column="1">
        <StackPanel IsEnabled="@(!IsLoadingFile)" Wrap="false">
            @if (!_hideNonEssentialToolBar)
            {
                @if (!UITextInput.IsReadOnly)
                {
                    <Button @onclick="@OnPasteButtonClickAsync">
                        <StackPanel>
                            <FontIcon Glyph="@('\uF2D5')" />
                            <TextBlock Text="Paste"
                                       IsVisible="@(!_isToolBarShrink)" />
                        </StackPanel>
                    </Button>
                    <Button ToolTip="Load a file"
                            @onclick="@OnLoadFileButtonClickAsync">
                        <FontIcon Glyph="@('\uF378')" />
                    </Button>
                    <Button ToolTip="Clear"
                            @onclick="@OnClearButtonClickAsync">
                        <FontIcon Glyph="@('\uF369')" />
                    </Button>
                }

                @if (!UITextInput.IsReadOnly && UITextInput.CanCopyWhenEditable)
                {
                    <div class="ui-text-input-wrapper-separator"></div>
                }

                @if (UITextInput.IsReadOnly || UITextInput.CanCopyWhenEditable)
                {
                    <Button ToolTip="Save as..."
                            @onclick="@OnSaveAsButtonClickAsync">
                        <FontIcon Glyph="@('\uF67F')" />
                    </Button>
                    <Button @onclick="@OnCopyButtonClick">
                        <StackPanel>
                            <FontIcon Glyph="@('\uF32B')" />
                            <TextBlock Text="Copy"
                                       IsVisible="@(!_isToolBarShrink)" />
                        </StackPanel>
                    </Button>
                }
            }
            else
            {
                <DropDownButton ToolTip="More..."
                                Items="@CollapsedDropDownListItems"
                                AnchorOrigin="Origin.BottomRight"
                                TransformOrigin="Origin.TopRight"
                                DisplayArrow="false">
                    <FontIcon Glyph="@('\uE824')" Height="22" Width="22" />
                </DropDownButton>
            }
            <div class="ui-text-input-wrapper-separator"></div>
            <DropDownButton ToolTip="Transfer to another tool"
                            Items="@SmartDetectionDropDownItems"
                            AnchorOrigin="Origin.BottomRight"
                            TransformOrigin="Origin.TopRight">
                <img src="@(ToolsDetectedBySmartDetection ? "_content/DevToys.Blazor/img/idea.svg" : "_content/DevToys.Blazor/img/idea-disabled.svg")"
                     height="22"
                     width="22"
                     style="flex-basis: auto; align-self:center;" />
            </DropDownButton>
        </StackPanel>
    </GridCell>
    <GridCell Row="1" Column="0" ColumnSpan="2">
        <Container IsEnabled="@(!IsLoadingFile)">
            @ChildContent

            <!-- Progress bar to indicate when a file is being loaded -->
            <div class="ui-text-input-wrapper-centered-progress-bar">
                <ProgressBar IsIndeterminate="true"
                             IsVisible="@IsLoadingFile"
                             MarginLeft="24"
                             MarginRight="24"
                             HorizontalAlignment="UIHorizontalAlignment.Stretch"
                             VerticalAlignment="UIVerticalAlignment.Top" />
            </div>

            <!-- Input form used for getting the dropped file when use drag and drop a file into the UI. -->
            <InputFile style="display: none;" OnChange="OnFileDroppedAsync" />
        </Container>
    </GridCell>
</Grid>