<#@ template debug="true" hostSpecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq"#>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.Design" #>
<#@ import namespace="System.Resources" #>
<#@ import namespace="Microsoft.CSharp"#>
<#@ import namespace="System.Text"#>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>

<#
    var stringsFolder = Host.ResolvePath(@"Strings/en");
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

using Microsoft.Toolkit.Mvvm.ComponentModel;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using Windows.ApplicationModel.Resources;
using Windows.Globalization;
using Windows.UI.Xaml;

namespace DevToys
{
    public partial class LanguageManager : ObservableObject
    {
        private static LanguageManager? _languageManager;

<#
    foreach (var file in Directory.GetFiles(stringsFolder, "*.resw"))
    {
        var fileInfo = new FileInfo(file);
        var fileName = Path.GetFileNameWithoutExtension(fileInfo.Name);
#>
        private readonly <#= fileName #>Strings _<#= fileName.ToLower() #> = new <#= fileName #>Strings();
<#
    }
#>

        /// <summary>
        /// Gets an instance of <see cref="LanguageManager"/>.
        /// </summary>
        public static LanguageManager Instance => _languageManager ?? (_languageManager = new LanguageManager());

        /// <summary>
        /// Gets if the text must be written from left to right or from right to left.
        /// </summary>
        public FlowDirection FlowDirection { get; private set; }
<#
    foreach (var file in Directory.GetFiles(stringsFolder, "*.resw"))
    {
        var fileInfo = new FileInfo(file);
        var fileName = Path.GetFileNameWithoutExtension(fileInfo.Name);
#>

        /// <summary>
        /// Gets the <see cref="<#= fileName #>Strings"/>.
        /// </summary>
        public <#= fileName #>Strings <#= fileName #> => _<#= fileName.ToLower() #>;
<#
    }
#>

        /// <summary>
        /// Gets the list of available languages in the app.
        /// </summary>
        public List<LanguageDefinition> AvailableLanguages
            => new List<LanguageDefinition>
            {
                new LanguageDefinition
                {
                    Identifier = "default",
                    DisplayName = Settings.DefaultLanguage,
                    Culture = CultureInfo.InstalledUICulture
                },
                new LanguageDefinition
                {
                    Identifier = "english",
                    DisplayName = "English",
                    Culture = new CultureInfo("en")
                },
                new LanguageDefinition
                {
                    Identifier = "russian",
                    DisplayName = "Русский",
                    Culture = new CultureInfo("ru")
                },
                new LanguageDefinition
                {
                    Identifier = "french",
                    DisplayName = "français",
                    Culture = new CultureInfo("fr")
                },
                new LanguageDefinition
                {
                    Identifier = "czech",
                    DisplayName = "Czech",
                    Culture = new CultureInfo("cs")
                }
            };

        /// <summary>
        /// Retrieves the current culture.
        /// </summary>
        public CultureInfo GetCurrentCulture()
        {
            return CultureInfo.CurrentUICulture;
        }

        /// <summary>
        /// Change the current culture of the application
        /// </summary>
        public void SetCurrentCulture(CultureInfo culture)
        {
            CultureInfo.DefaultThreadCurrentCulture = culture;
            CultureInfo.DefaultThreadCurrentUICulture = culture;
            ApplicationLanguages.PrimaryLanguageOverride = culture.TextInfo.CultureName;

            if (culture.TextInfo.IsRightToLeft)
            {
                FlowDirection = FlowDirection.RightToLeft;
            }
            else
            {
                FlowDirection = FlowDirection.LeftToRight;
            }

            // All the properties changed.
            OnPropertyChanged(new PropertyChangedEventArgs(string.Empty));
        }
    }
<#
    // Generate strings classes.

    foreach (var file in Directory.GetFiles(stringsFolder, "*.resw"))
    {
        var fileInfo = new FileInfo(file);
        var fileName = Path.GetFileNameWithoutExtension(fileInfo.Name);
        var resourcesFilePath = fileInfo.FullName;

        if (!File.Exists(resourcesFilePath))
        {
            throw new FileNotFoundException(resourcesFilePath);
        }

        using (var reader = new ResXResourceReader(resourcesFilePath))
        {
            reader.UseResXDataNodes = true;
#>

    public class <#= $"{fileName}Strings" #> : ObservableObject
    {
        private readonly ResourceLoader _resources = ResourceLoader.GetForViewIndependentUse("<#= fileName #>");
<#
            foreach (DictionaryEntry entry in reader) 
            { 
                var name = entry.Key;
#>

        /// <summary>
        /// Gets the resource <#= name #>.
        /// </summary>
        public string <#= name #> => _resources.GetString("<#= $"{name}" #>");
<#
                var node = (ResXDataNode)entry.Value;
                var value = node.GetValue((ITypeResolutionService) null).ToString();
                if (value.Contains("{0}"))
                {
                    var parametersCount = Regex.Matches(value.Replace("{{", string.Empty), @"\{(\d+)").OfType<Match>().Select(match => int.Parse(match.Groups[1].Value)).Union(Enumerable.Repeat(-1, 1)).Max() + 1;
                    var argumentsDecl = "";
                    var argumentsRef = "";
                    for (var i = 0; i < parametersCount; i++)
                    {
                        argumentsDecl += $"string? param{i}, ";
                        argumentsRef += $"param{i}, ";
                    }

                    argumentsDecl = argumentsDecl.Trim(' ').Trim(',');
                    argumentsRef = argumentsRef.Trim(' ').Trim(',');
                    #>

        /// <summary>
        /// Gets the resource <#= name #> with format.
        /// </summary>
        public string GetFormatted<#= name #>(<#= argumentsDecl #>)
        {
            return string.Format(<#= name #>, <#= argumentsRef #>);
        }
<#
                }
            }
#>
    }
<#
        }
	}
#>
}
