<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccessibleName" xml:space="preserve">
    <value>Nástroj pro testování regulárních výrazů</value>
  </data>
  <data name="Configuration" xml:space="preserve">
    <value>Konfigurace</value>
  </data>
  <data name="CultureInvariant" xml:space="preserve">
    <value>Jakákoliv kultura</value>
  </data>
  <data name="CultureInvariantDescription" xml:space="preserve">
    <value>Určuje, že kulturní rozdíly v jazyce jsou ignorovány.</value>
  </data>
  <data name="MenuDisplayName" xml:space="preserve">
    <value>Tester regulárních výrazů</value>
  </data>
  <data name="EcmaScript" xml:space="preserve">
    <value>Skript ECMA</value>
  </data>
  <data name="EcmaScriptDescription" xml:space="preserve">
    <value>Povolí chování výrazu v souladu s ECMAScript. Tuto hodnotu lze použít pouze ve spojení s možnostmi Kulturní invariant, Ignorovat malá a velká písmena a Víceřádkový.</value>
  </data>
  <data name="IgnoreCase" xml:space="preserve">
    <value>Ignorovat malá a velká písmena</value>
  </data>
  <data name="IgnoreCaseDescription" xml:space="preserve">
    <value>Určuje přiřazování bez ohledu na velikost písmen.</value>
  </data>
  <data name="IgnoreWhitespace" xml:space="preserve">
    <value>Ignorovat bílé znaky</value>
  </data>
  <data name="IgnoreWhitespaceDescription" xml:space="preserve">
    <value>Odstraní ze vzoru nezapsané bílé znaky a povolí komentáře označené #. Tato hodnota však neovlivňuje ani neodstraňuje bílé znaky ve třídách znaků, číselných kvantifikátorech nebo tokenech, které označují začátek jednotlivých prvků regulárních výrazů.</value>
  </data>
  <data name="Multiline" xml:space="preserve">
    <value>Víceřádkový</value>
  </data>
  <data name="MultilineDescription" xml:space="preserve">
    <value>Změní význam znaků ^ a $ tak, aby se shodovaly na začátku a na konci libovolného řádku, nikoli pouze na začátku a na konci celého řetězce.</value>
  </data>
  <data name="Options" xml:space="preserve">
    <value>Možnosti</value>
  </data>
  <data name="RegularExpression" xml:space="preserve">
    <value>Regulární výraz</value>
  </data>
  <data name="RightToLeft" xml:space="preserve">
    <value>Zprava doleva</value>
  </data>
  <data name="RightToLeftDescription" xml:space="preserve">
    <value>Specifikuje směr hledání. Místo zleva doprava bude probíhat zprava doleva.</value>
  </data>
  <data name="Singleline" xml:space="preserve">
    <value>Jednořádkový</value>
  </data>
  <data name="SinglelineDescription" xml:space="preserve">
    <value>Změní význam tečky (.) tak, aby odpovídala každému znaku (namísto každého znaku kromě \n).</value>
  </data>
  <data name="Text" xml:space="preserve">
    <value>Text</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Ověřování a testování regulárních výrazů</value>
  </data>
  <data name="SearchDisplayName" xml:space="preserve">
    <value>Tester regulárních výrazů</value>
  </data>
  <data name="SearchKeywords" xml:space="preserve">
    <value>Regulární výraz</value>
  </data>
  <data name="InputTitle" xml:space="preserve">
    <value>Vstup</value>
  </data>
  <data name="OutputTitle" xml:space="preserve">
    <value>Výstup</value>
  </data>
  <data name="Group" xml:space="preserve">
    <value>Skupina</value>
  </data>
  <data name="Match" xml:space="preserve">
    <value>Shoda</value>
  </data>
  <data name="Matches" xml:space="preserve">
    <value>Shody</value>
  </data>
</root>