<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccessibleName" xml:space="preserve">
    <value>Narzędzie Testujące Wyrażenia Regularne</value>
  </data>
  <data name="Configuration" xml:space="preserve">
    <value>Konfiguracja</value>
  </data>
  <data name="CultureInvariant" xml:space="preserve">
    <value>Niezmienność kulturowa</value>
  </data>
  <data name="CultureInvariantDescription" xml:space="preserve">
    <value>Określa, że różnice kulturowe w języku są ignorowane.</value>
  </data>
  <data name="MenuDisplayName" xml:space="preserve">
    <value>Tester RegEx</value>
  </data>
  <data name="EcmaScript" xml:space="preserve">
    <value>ECMASkript</value>
  </data>
  <data name="EcmaScriptDescription" xml:space="preserve">
    <value>Włącza zachowanie zgodne z ECMAScript dla wyrażenia. Tej wartości można używać tylko w połączeniu z opcją Niezmienność kulturowa, Ignoruj wielkość liter i Wielowierszowy.</value>
  </data>
  <data name="IgnoreCase" xml:space="preserve">
    <value>Ignoruj wielkość liter</value>
  </data>
  <data name="IgnoreCaseDescription" xml:space="preserve">
    <value>Określa dopasowanie bez rozróżniania wielkości liter.</value>
  </data>
  <data name="IgnoreWhitespace" xml:space="preserve">
    <value>Ignoruj białe znaki</value>
  </data>
  <data name="IgnoreWhitespaceDescription" xml:space="preserve">
    <value>Eliminuje nieuniknione białe znaki (spacje, entery itp.) ze wzorca i umożliwia komentarze oznaczone #. Jednak ta opcja nie wpływa ani nie eliminuje białych znaków w klasach znaków, kwantyfikatorach liczbowych ani tokenach, które oznaczają początek poszczególnych elementów wyrażenia regularnego.</value>
  </data>
  <data name="Multiline" xml:space="preserve">
    <value>Wiele wierszy</value>
  </data>
  <data name="MultilineDescription" xml:space="preserve">
    <value>Zmienia znaczenie ^ i $ tak, aby pasowały odpowiednio na początku i końcu dowolnego wiersza, a nie tylko na początku i końcu całego ciągu.</value>
  </data>
  <data name="Options" xml:space="preserve">
    <value>Opcje</value>
  </data>
  <data name="RegularExpression" xml:space="preserve">
    <value>Wyrażenie regularne</value>
  </data>
  <data name="RightToLeft" xml:space="preserve">
    <value>Od prawej do lewej</value>
  </data>
  <data name="RightToLeftDescription" xml:space="preserve">
    <value>Określa, że wyszukiwanie będzie odbywać się od prawej do lewej zamiast od lewej do prawej.</value>
  </data>
  <data name="Singleline" xml:space="preserve">
    <value>Jeden wiersz</value>
  </data>
  <data name="SinglelineDescription" xml:space="preserve">
    <value>Zmienia znaczenie kropki (.), aby pasowała do każdego znaku (zamiast każdego znaku z wyjątkiem \n).</value>
  </data>
  <data name="Text" xml:space="preserve">
    <value>Tekst</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Sprawdź i przetestuj wyrażenie regularne</value>
  </data>
  <data name="SearchDisplayName" xml:space="preserve">
    <value>Tester RegEx</value>
  </data>
  <data name="SearchKeywords" xml:space="preserve">
    <value>Wyrażenie regularne</value>
  </data>
  <data name="InputTitle" xml:space="preserve">
    <value>Wejście</value>
  </data>
  <data name="OutputTitle" xml:space="preserve">
    <value>Wyjście</value>
  </data>
  <data name="Group" xml:space="preserve">
    <value>Grupa</value>
  </data>
  <data name="Match" xml:space="preserve">
    <value>Dopasuj</value>
  </data>
  <data name="Matches" xml:space="preserve">
    <value>Dopasowania</value>
  </data>
</root>