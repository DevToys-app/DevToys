<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccessibleName" xml:space="preserve">
    <value>JWT エンコーダー / デコーダー</value>
  </data>
  <data name="MenuDisplayName" xml:space="preserve">
    <value>JWT</value>
  </data>
  <data name="JwtHeaderLabel" xml:space="preserve">
    <value>ヘッダー</value>
  </data>
  <data name="JwtTokenLabel" xml:space="preserve">
    <value>トークン</value>
  </data>
  <data name="JwtPayloadLabel" xml:space="preserve">
    <value>ペイロード</value>
  </data>
  <data name="Type" xml:space="preserve">
    <value>文章の種類</value>
  </data>
  <data name="Value" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="DescriptionHeader" xml:space="preserve">
    <value>スケジュールの説明</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>ヘッダー、ペイロード、署名から JWT の生成とトークンの検証</value>
  </data>
  <data name="SearchKeywords" xml:space="preserve">
    <value/>
  </data>
  <data name="Algorithm" xml:space="preserve">
    <value>アルゴリズム</value>
  </data>
  <data name="DecodeSwitchModeLabel" xml:space="preserve">
    <value>デコード</value>
  </data>
  <data name="DecodeValidateTokenLabel" xml:space="preserve">
    <value>トークンの検証</value>
  </data>
  <data name="DecodeValidateTokenNoLabel" xml:space="preserve">
    <value>オフ</value>
  </data>
  <data name="DecodeValidateTokenYesLabel" xml:space="preserve">
    <value>オン</value>
  </data>
  <data name="EncodeExpirationTitle" xml:space="preserve">
    <value>トークンの有効期限</value>
  </data>
  <data name="EncodeExpirationMonthLabel" xml:space="preserve">
    <value>月</value>
  </data>
  <data name="EncodeExpirationYearLabel" xml:space="preserve">
    <value>年</value>
  </data>
  <data name="EncodeHashingTitle" xml:space="preserve">
    <value>署名のアルゴリズム</value>
  </data>
  <data name="EncodeSettingsTitle" xml:space="preserve">
    <value>設定</value>
  </data>
  <data name="EncodeSwitchModeLabel" xml:space="preserve">
    <value>エンコード</value>
  </data>
  <data name="SettingsSwitchModeLabel" xml:space="preserve">
    <value>モード</value>
  </data>
  <data name="SettingsTitle" xml:space="preserve">
    <value>構成</value>
  </data>
  <data name="EncodeDefaultTimeTitle" xml:space="preserve">
    <value>デフォルトの有効期間を設定する</value>
  </data>
  <data name="EncodeExpirationDaysLabel" xml:space="preserve">
    <value>日</value>
  </data>
  <data name="EncodeExpirationHoursLabel" xml:space="preserve">
    <value>時間</value>
  </data>
  <data name="EncodeExpirationMinutesLabel" xml:space="preserve">
    <value>分</value>
  </data>
  <data name="PrivateKeyLabel" xml:space="preserve">
    <value>秘密鍵</value>
  </data>
  <data name="SignatureLabel" xml:space="preserve">
    <value>署名</value>
  </data>
  <data name="JwtNotValidated" xml:space="preserve">
    <value>トークンは検証されていません (検証するパラメーターが選択されていません)</value>
  </data>
  <data name="JwtIsValidMessage" xml:space="preserve">
    <value>指定された項目のすべてが検証済みのトークンです</value>
  </data>
  <data name="InvalidPublicKeyError" xml:space="preserve">
    <value>有効な公開鍵ではありません</value>
  </data>
  <data name="JwtInValidMessage" xml:space="preserve">
    <value>有効な署名ではありません</value>
  </data>
  <data name="DecodeValidateActorLabel" xml:space="preserve">
    <value>アクタークレームを検証する</value>
  </data>
  <data name="DecodeValidateAudienceLabel" xml:space="preserve">
    <value>オーディエンスクレームを検証する</value>
  </data>
  <data name="DecodeValidateIssuerSigningKey" xml:space="preserve">
    <value>発行者の署名鍵を検証する</value>
  </data>
  <data name="DecodeValidateIssuerLabel" xml:space="preserve">
    <value>発行者クレームを検証する</value>
  </data>
  <data name="DecodeValidateLifetimeLabel" xml:space="preserve">
    <value>有効期間を検証する</value>
  </data>
  <data name="ValidAudiencesLabel" xml:space="preserve">
    <value>オーディエンスクレームの値</value>
  </data>
  <data name="ValidIssuersLabel" xml:space="preserve">
    <value>発行者クレームの値</value>
  </data>
  <data name="DecodeValidationSettingsDescription" xml:space="preserve">
    <value>検証を行うトークン内のパラメーターを設定します</value>
  </data>
  <data name="DecodeValidationSettingsTitle" xml:space="preserve">
    <value>検証するパラメーターの設定</value>
  </data>
  <data name="ValidAudiencesError" xml:space="preserve">
    <value>検証を行うための オーディエンスクレームの値が入力されていません</value>
  </data>
  <data name="ValidIssuersError" xml:space="preserve">
    <value>検証を行うための 発行者クレームの値が入力されていません</value>
  </data>
  <data name="PublicKeyIsPrivateKeyError" xml:space="preserve">
    <value>公開鍵の入力欄に秘密鍵が入力されました</value>
  </data>
  <data name="EncodeAudienceLabel" xml:space="preserve">
    <value>オーディエンスクレームを設定する</value>
  </data>
  <data name="EncodeIssuerLabel" xml:space="preserve">
    <value>発行者クレームを設定する</value>
  </data>
  <data name="EncodeSettingsDescription" xml:space="preserve">
    <value>トークンに使用するパラメーターを設定します</value>
  </data>
  <data name="InvalidPrivateKeyError" xml:space="preserve">
    <value>有効な秘密鍵ではありません</value>
  </data>
  <data name="PublicKeyLabel" xml:space="preserve">
    <value>公開鍵</value>
  </data>
  <data name="SearchDisplayName" xml:space="preserve">
    <value>JWT エンコーダー / デコーダー</value>
  </data>
  <data name="InvalidSignatureError" xml:space="preserve">
    <value>有効な署名ではありません</value>
  </data>
  <data name="NoDescription" xml:space="preserve">
    <value>No description</value>
  </data>
  <data name="iss" xml:space="preserve">
    <value>The "iss" (issuer) claim identifies the principal that issued the JWT. The processing of this claim is generally application specific. The "iss" value is a case-sensitive string containing a StringOrURI value. Use of this claim is OPTIONAL.</value>
  </data>
  <data name="sub" xml:space="preserve">
    <value>The "sub" (subject) claim identifies the principal that is the subject of the JWT. The claims in a JWT are normally statements about the subject. The subject value MUST either be scoped to be locally unique in the context of the issuer or be globally unique. The processing of this claim is generally application specific. The "sub" value is a case-sensitive string containing a StringOrURI value. Use of this claim is OPTIONAL.</value>
  </data>
  <data name="aud" xml:space="preserve">
    <value>The "aud" (audience) claim identifies the recipients that the JWT is intended for. Each principal intended to process the JWT MUST identify itself with a value in the audience claim. If the principal processing the claim does not identify itself with a value in the "aud" claim when this claim is present, then the JWT MUST be rejected. In the general case, the "aud" value is an array of case-sensitive strings, each containing a StringOrURI value. In the special case when the JWT has one audience, the "aud" value MAY be a single case-sensitive string containing a StringOrURI value. The interpretation of audience values is generally application specific. Use of this claim is OPTIONAL.</value>
  </data>
  <data name="exp" xml:space="preserve">
    <value>The "exp" (expiration time) claim identifies the expiration time on or after which the JWT MUST NOT be accepted for processing. The processing of the "exp" claim requires that the current date/time MUST be before the expiration date/time listed in the "exp" claim. Implementers MAY provide for some small leeway, usually no more than a few minutes, to account for clock skew. Its value MUST be a number containing a NumericDate value. Use of this claim is OPTIONAL.</value>
  </data>
  <data name="nbf" xml:space="preserve">
    <value>The "nbf" (not before) claim identifies the time before which the JWT MUST NOT be accepted for processing. The processing of the "nbf" claim requires that the current date/time MUST be after or equal to the not-before date/time listed in the "nbf" claim. Implementers MAY provide for some small leeway, usually no more than a few minutes, to account for clock skew. Its value MUST be a number containing a NumericDate value. Use of this claim is OPTIONAL.</value>
  </data>
  <data name="iat" xml:space="preserve">
    <value>The "iat" (issued at) claim identifies the time at which the JWT was issued. This claim can be used to determine the age of the JWT. Its value MUST be a number containing a NumericDate value. Use of this claim is OPTIONAL.</value>
  </data>
  <data name="jti" xml:space="preserve">
    <value>The "jti" (JWT ID) claim provides a unique identifier for the JWT. The identifier value MUST be assigned in a manner that ensures that there is a negligible probability that the same value will be accidentally assigned to a different data object; if the application uses multiple issuers, collisions MUST be prevented among values produced by different issuers as well. The "jti" claim can be used to prevent the JWT from being replayed. The "jti" value is a case-sensitive string. Use of this claim is OPTIONAL.</value>
  </data>
  <data name="name" xml:space="preserve">
    <value>End-User's full name in displayable form including all name parts, possibly including titles and suffixes, ordered according to the End-User's locale and preferences.</value>
  </data>
  <data name="given_name" xml:space="preserve">
    <value>Given name(s) or first name(s) of the End-User. Note that in some cultures, people can have multiple given names; all can be present, with the names being separated by space characters.</value>
  </data>
  <data name="family_name" xml:space="preserve">
    <value>Surname(s) or last name(s) of the End-User. Note that in some cultures, people can have multiple family names or no family name; all can be present, with the names being separated by space characters.</value>
  </data>
  <data name="middle_name" xml:space="preserve">
    <value>Middle name(s) of the End-User. Note that in some cultures, people can have multiple middle names; all can be present, with the names being separated by space characters. Also note that in some cultures, middle names are not used.</value>
  </data>
  <data name="nickname" xml:space="preserve">
    <value>Casual name of the End-User that may or may not be the same as the given_name. For instance, a nickname value of Mike might be returned alongside a given_name value of Michael.</value>
  </data>
  <data name="preferred_username" xml:space="preserve">
    <value>Shorthand name by which the End-User wishes to be referred to at the RP, such as janedoe or j.doe. This value MAY be any valid JSON string including special characters such as @, /, or whitespace. The RP MUST NOT rely upon this value being unique.</value>
  </data>
  <data name="profile" xml:space="preserve">
    <value>URL of the End-User's profile page. The contents of this Web page SHOULD be about the End-User.</value>
  </data>
  <data name="picture" xml:space="preserve">
    <value>URL of the End-User's profile picture. This URL MUST refer to an image file (for example, a PNG, JPEG, or GIF image file), rather than to a Web page containing an image. Note that this URL SHOULD specifically reference a profile photo of the End-User suitable for displaying when describing the End-User, rather than an arbitrary photo taken by the End-User.</value>
  </data>
  <data name="website" xml:space="preserve">
    <value>URL of the End-User's Web page or blog. This Web page SHOULD contain information published by the End-User or an organization that the End-User is affiliated with.</value>
  </data>
  <data name="email" xml:space="preserve">
    <value>[OpenID]
End-User の希望する電子メールアドレス。RFC 5322 の addr-spec 構文に準拠している必要があります。
OAuth 2.0 Client (RP) は、email 値がユニークであることを前提としてはなりません (MUST NOT)。</value>
  </data>
  <data name="email_verified" xml:space="preserve">
    <value>[OpenID]
End-User の電子メールアドレスが検証済みの場合は true、それ以外の場合は false を示す boolean 値です。
このクレームの値が true の場合、OpenID Provider (OP) が検証を行った時点において、電子メールアドレスが End-User のコントロール下にあることを確認する処理を行ったことを示します。
電子メールアドレスの検証方法は、コンテキストに依存し、当事者間のトラストフレームワークや契約上の同意事項等に依存します。</value>
  </data>
  <data name="gender" xml:space="preserve">
    <value>End-User's gender. Values defined by this specification are female and male. Other values MAY be used when neither of the defined values are applicable.</value>
  </data>
  <data name="birthdate" xml:space="preserve">
    <value>[OpenID]
End-User の誕生日。
ISO 8601:2004 YYYY-MM-DD 形式で表現されます。
年の値を 0000 とすることで省略されていることを示すことができます (MAY)。
年のみを表すために、YYYY 形式が許可されています。
ただし、利用するプラットフォームの日付関連機能や関数の実装によっては、年だけを提供した際の月や日が異なる結果となる場合があるため、実装者はこの点を考慮に入れて日付を正しく処理する必要があります。</value>
  </data>
  <data name="zoneinfo" xml:space="preserve">
    <value>String from zoneinfo time zone database representing the End-User's time zone. For example, Europe/Paris or America/Los_Angeles.</value>
  </data>
  <data name="locale" xml:space="preserve">
    <value>End-User's locale, represented as a BCP47 [RFC5646] language tag. This is typically an ISO 639-1 Alpha-2 language code in lowercase and an ISO 3166-1 Alpha-2 country code in uppercase, separated by a dash. For example, en-US or fr-CA. As a compatibility note, some implementations have used an underscore as the separator rather than a dash, for example, en_US; Relying Parties MAY choose to accept this locale syntax as well.</value>
  </data>
  <data name="phone_number" xml:space="preserve">
    <value>End-User's preferred telephone number. E.164 is RECOMMENDED as the format of this Claim, for example, +1 (425) 555-1212 or +56 (2) 687 2400. If the phone number contains an extension, it is RECOMMENDED that the extension be represented using the RFC 3966 extension syntax, for example, +1 (604) 555-1234;ext=5678.</value>
  </data>
  <data name="phone_number_verified" xml:space="preserve">
    <value>True if the End-User's phone number has been verified; otherwise false. When this Claim Value is true, this means that the OP took affirmative steps to ensure that this phone number was controlled by the End-User at the time the verification was performed. The means by which a phone number is verified is context-specific, and dependent upon the trust framework or contractual agreements within which the parties are operating. When true, the phone_number Claim MUST be in E.164 format and any extensions MUST be represented in RFC 3966 format.</value>
  </data>
  <data name="address" xml:space="preserve">
    <value>[OpenID]
End-User の希望する郵送先住所。address メンバーの値は Address クレームに定義されたメンバーを含む JSON [RFC4627] 構造体です。</value>
  </data>
  <data name="updated_at" xml:space="preserve">
    <value>Time the End-User's information was last updated. Its value is a JSON number representing the number of seconds from 1970-01-01T0:0:0Z as measured in UTC until the date/time.</value>
  </data>
  <data name="azp" xml:space="preserve">
    <value>[OpenID/OPTIONAL]
Authorized party.
ID Token が発行された当事者です。
このクレームが存在する場合、この当事者の OAuth 2.0 Client ID でなければなりません (MUST)。
このクレームは、ID Token に単一の audience 値があり、その値が承認済みの当事者と異なる場合にのみ必要になります。
audience 値と azp 値が同じ場合でも、このクレームを含めることができます (MAY)。
azp の値は、StringOrURI の値を含む、大文字と小文字が区別される文字列です。</value>
  </data>
  <data name="nonce" xml:space="preserve">
    <value>String value used to associate a Client session with an ID Token, and to mitigate replay attacks. The value is passed through unmodified from the Authentication Request to the ID Token. If present in the ID Token, Clients MUST verify that the nonce Claim Value is equal to the value of the nonce parameter sent in the Authentication Request. If present in the Authentication Request, Authorization Servers MUST include a nonce Claim in the ID Token with the Claim Value being the nonce value sent in the Authentication Request. Authorization Servers SHOULD perform no other processing on nonce values used. The nonce value is a case sensitive string.</value>
  </data>
  <data name="auth_time" xml:space="preserve">
    <value>[OpenID/REQUIRED/OPTIONAL]
End-User の認証が行われた時刻です。
この値は UTC 1970-01-01T0:0:0Z からの経過秒数を示す JSON 数値です。
リクエストに max_age が含まれている場合や、auth_time が Essential クレーム として要求される場合には、このクレームは必須です (REQUIRED)。
それ以外の場合は任意です (OPTIONAL)。
（ auth_time クレームは、OpenID 2.0 PAPE の auth_time レスポンスパラメーターに相当します。）</value>
  </data>
  <data name="at_hash" xml:space="preserve">
    <value>[OpenID/OPTIONAL]
Access Token hash value.
access_token の ASCII オクテット列のハッシュ値の左半分を base64url エンコードしたものです。
ハッシュアルゴリズムは、 ID Token の JOSE Header にある alg Header Parameter で指定されるハッシュアルゴリズムと同じものを使用します。
例えば、alg が RS256 の場合では、access_token の値を SHA-256 ハッシュ化して、左側半分の 128 ビットを取り、base64url エンコードします。
at_hash の値は、大文字と小文字が区別される文字列です。</value>
  </data>
  <data name="c_hash" xml:space="preserve">
    <value>[OpenID/REQUIRED/OPTIONAL]
Code hash value.
code の ASCII オクテット列のハッシュ値の左半分を base64url エンコードしたものです。
ハッシュアルゴリズムは、 ID Token の JOSE Header にある alg Header Parameter で指定されるハッシュアルゴリズムと同じものを使用します。
例えば、alg が RS256 の場合では、code の値を SHA-256 ハッシュ化して、左側半分の128ビットを取り、base64url エンコードします。
c_hash の値は、大文字と小文字が区別される文字列です。
ID Token が code と共に Authorization Endpoint から発行される場合(response_type の値が code id_token や code id_token token の場合)、このクレームは必須です (REQUIRED)。
それ以外の場合は任意です (OPTIONAL)。</value>
  </data>
  <data name="acr" xml:space="preserve">
    <value>[OpenID/OPTIONAL]
Authentication Context Class Reference。
実施された認証処理が満たす Authentication Context Class を表す、文字列で指定する値。
値 "0" は、End-User の認証が ISO/IEC 29115 レベル 1 の要件を満たしていないことを意味します。
例えば、長期間有効なブラウザの Cookie を使用した認証は "レベル 0" として指定されます。
レベル 0 の認証は、金銭にかかわるリソースへの認可要求に使用してはなりません (SHOULD NOT)。
(これは OpenID 2.0 PAPE nist_auth_level 0 に対応します。)
acr の値は、絶対 URI または RFC 6711 で登録された値を使用する事が推奨されます (SHOULD)。
登録された値は、登録されたものとは異なる意味で使用してはなりません (MUST NOT)。
この値は、コンテキストに依存する可能性があるため、使用する当事者間で値の意味について合意する必要があります。
acr の値は、大文字と小文字が区別される文字列です。</value>
  </data>
  <data name="amr" xml:space="preserve">
    <value>[OpenID/OPTIONAL]
Authentication Methods References.
認証に使用される認証方法の識別子である文字列の JSON 配列。
例えば、パスワードと OTP 認証の両方が使用されたことを示す場合があります。
amr クレームで使用される値はの定義は、仕様の範囲外です。
この値は、コンテキストに依存する可能性があるため、使用する当事者間で値の意味について合意する必要があります。
amr の値は、大文字と小文字が区別される文字列です。</value>
  </data>
  <data name="sub_jwk" xml:space="preserve">
    <value>Public key used to check the signature of an ID Token issued by a Self-Issued OpenID Provider. The key is a bare key in JWK format (not an X.509 certificate value). The sub_jwk value is a JSON object. Use of the sub_jwk Claim is NOT RECOMMENDED when the OP is not Self-Issued.</value>
  </data>
</root>
