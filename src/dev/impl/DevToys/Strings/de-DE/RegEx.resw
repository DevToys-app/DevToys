<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccessibleName" xml:space="preserve">
    <value>Reguläre Ausdrücke Testwerkzeug</value>
  </data>
  <data name="Configuration" xml:space="preserve">
    <value>Konfiguration</value>
  </data>
  <data name="CultureInvariant" xml:space="preserve">
    <value>Culture Invariant</value>
  </data>
  <data name="CultureInvariantDescription" xml:space="preserve">
    <value>Gibt an, dass kulturelle Unterschiede in der Sprache ignoriert werden.</value>
  </data>
  <data name="MenuDisplayName" xml:space="preserve">
    <value>Regex Tester</value>
  </data>
  <data name="EcmaScript" xml:space="preserve">
    <value>ECMA Script</value>
  </data>
  <data name="EcmaScriptDescription" xml:space="preserve">
    <value>Aktiviert ECMAScript-konformes Verhalten für den Ausdruck. Dieser Wert kann nur in Verbindung mit den Optionen Culture Invariant, Ignore Case und Multiline verwendet werden.</value>
  </data>
  <data name="IgnoreCase" xml:space="preserve">
    <value>Groß-/Kleinschreibung ignorieren</value>
  </data>
  <data name="IgnoreCaseDescription" xml:space="preserve">
    <value>Vergleicht ohne Berücksichtigung der Groß- und Kleinschreibung</value>
  </data>
  <data name="IgnoreWhitespace" xml:space="preserve">
    <value>Leerzeichen ignorieren</value>
  </data>
  <data name="IgnoreWhitespaceDescription" xml:space="preserve">
    <value>Entfernt Leerzeichen aus dem Pattern und ermöglicht mit # markierte Kommentare. Dieser Wert hat jedoch keinen Einfluss auf die Beseitigung von Leerzeichen in Zeichenklassen, numerischen Quantifizierern oder Token, die den Beginn einzelner Sprachelemente regulärer Ausdrücke markieren.</value>
  </data>
  <data name="Multiline" xml:space="preserve">
    <value>Mehrzeilig</value>
  </data>
  <data name="MultilineDescription" xml:space="preserve">
    <value>Ändert die Bedeutung von ^ und $, so dass sie am Anfang bzw. Ende einer beliebigen Zeile übereinstimmen und nicht nur am Anfang und Ende der gesamten Zeichenkette.</value>
  </data>
  <data name="Options" xml:space="preserve">
    <value>Optionen</value>
  </data>
  <data name="RegularExpression" xml:space="preserve">
    <value>Regulärer Ausdruck</value>
  </data>
  <data name="RightToLeft" xml:space="preserve">
    <value>Von rechts nach links</value>
  </data>
  <data name="RightToLeftDescription" xml:space="preserve">
    <value>Gibt an, dass die Suche von rechts nach links und nicht von links nach rechts erfolgt.</value>
  </data>
  <data name="Singleline" xml:space="preserve">
    <value>Einzeilig</value>
  </data>
  <data name="SinglelineDescription" xml:space="preserve">
    <value>Ändert die Bedeutung des Punktes (.), so dass er mit jedem Zeichen übereinstimmt (anstelle von jedem Zeichen außer \n).</value>
  </data>
  <data name="Text" xml:space="preserve">
    <value>Text</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Validieren und Testen regulärer Ausdrücke</value>
  </data>
  <data name="SearchDisplayName" xml:space="preserve">
    <value>Regex Tester</value>
  </data>
  <data name="SearchKeywords" xml:space="preserve">
    <value>Regular expression</value>
  </data>
</root>