<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccessibleName" xml:space="preserve">
    <value>정규식 시험 도구</value>
  </data>
  <data name="Configuration" xml:space="preserve">
    <value>설정</value>
  </data>
  <data name="CultureInvariant" xml:space="preserve">
    <value>문화 중립</value>
  </data>
  <data name="CultureInvariantDescription" xml:space="preserve">
    <value>다른 국가의 언어가 발견되어도 무시합니다.</value>
  </data>
  <data name="MenuDisplayName" xml:space="preserve">
    <value>정규식 시험</value>
  </data>
  <data name="EcmaScript" xml:space="preserve">
    <value>ECMA 스크립트</value>
  </data>
  <data name="EcmaScriptDescription" xml:space="preserve">
    <value>정규식을 ECMA 스크립트 방식으로 동작합니다. 이 형식은 문화 중립, 대소문자 무시, 여러줄 옵션을 선택할 수 있습니다.</value>
  </data>
  <data name="IgnoreCase" xml:space="preserve">
    <value>대소문자 무시</value>
  </data>
  <data name="IgnoreCaseDescription" xml:space="preserve">
    <value>문자열을 찾을 때 대소문자를 여부를 신경쓰지 않습니다.</value>
  </data>
  <data name="IgnoreWhitespace" xml:space="preserve">
    <value>공백 무시</value>
  </data>
  <data name="IgnoreWhitespaceDescription" xml:space="preserve">
    <value># 문자로 시작하는 주석 같은 경우, 이후 별도로 인코딩하지 않은 공백 사용 시 해당 줄을 제거합니다. 그러나 언어에 명시된 문자로 이루어진 클래스, 수치 식별자, 토큰 등에 포함된 공백은 영향을 미치지 않습니다.</value>
  </data>
  <data name="Multiline" xml:space="preserve">
    <value>여러줄</value>
  </data>
  <data name="MultilineDescription" xml:space="preserve">
    <value>^ 및 $ 문자를 사용하여 처음 및 끝을 맺는 정규식 사용 시 하나의 문단이 아닌 전체 텍스트를 의미하도록 부여합니다.</value>
  </data>
  <data name="Options" xml:space="preserve">
    <value>옵션</value>
  </data>
  <data name="RegularExpression" xml:space="preserve">
    <value>정규식</value>
  </data>
  <data name="RightToLeft" xml:space="preserve">
    <value>역순으로</value>
  </data>
  <data name="RightToLeftDescription" xml:space="preserve">
    <value>문자열 검색 시 왼쪽에서 오른쪽이 기본이지만, 오른쪽에서 왼쪽으로 검색 시 선택하세요.</value>
  </data>
  <data name="Singleline" xml:space="preserve">
    <value>단일 행</value>
  </data>
  <data name="SinglelineDescription" xml:space="preserve">
    <value>온점(.) 발견 시 모든 문자를 검색합니다. (기본적으로 \n 문자를 제외한 모든 문자를 검색합니다).</value>
  </data>
  <data name="Text" xml:space="preserve">
    <value>텍스트</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>정규식 평가 및 시험</value>
  </data>
  <data name="SearchDisplayName" xml:space="preserve">
    <value>정규식 시험</value>
  </data>
  <data name="SearchKeywords" xml:space="preserve">
    <value>Regular expression</value>
  </data>
</root>